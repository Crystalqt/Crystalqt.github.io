<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CrystalCrazy</title>
  
  <subtitle>自我管理，知识管理，时间管理，阅读，思维导图，游记</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://Crystalqt.github.io/"/>
  <updated>2018-01-28T15:51:14.000Z</updated>
  <id>http://Crystalqt.github.io/</id>
  
  <author>
    <name>梦涵</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>不懂别乱说，懂了别多说，有话慢慢说</title>
    <link href="http://Crystalqt.github.io/2018/01/28/%E4%B8%8D%E6%87%82%E5%88%AB%E4%B9%B1%E8%AF%B4%EF%BC%8C%E6%87%82%E4%BA%86%E5%88%AB%E5%A4%9A%E8%AF%B4%EF%BC%8C%E6%9C%89%E8%AF%9D%E6%85%A2%E6%85%A2%E8%AF%B4/"/>
    <id>http://Crystalqt.github.io/2018/01/28/不懂别乱说，懂了别多说，有话慢慢说/</id>
    <published>2018-01-28T15:27:56.000Z</published>
    <updated>2018-01-28T15:51:14.000Z</updated>
    
    <content type="html"><![CDATA[<div align="center"><br><img src="/uploads/640.jpg" alt=" "><br></div><h2 id="不懂别乱说"><a href="#不懂别乱说" class="headerlink" title="不懂别乱说"></a>不懂别乱说</h2><div align="center"><br>十语九中未必称奇，<br>一语不中，则愆尤骈集；<br>十谋九成未必归功，<br>一谋不成，则訾议丛兴。<br></div><br><div align="right"><br>——《菜根谭》<br></div><pre><code>十句话里说对九句，也不一定有人称赞你，但是如果你说错了一句，就会被别人指责。</code></pre><p>　　十次谋划有九次成功也不一定能得到奖励，但是一旦有一次失败，埋怨责备就会接踵而来。</p><p>　　这绝对不是危言耸听，俗话说“出头的椽子先烂”，一个人如果事情做得好，超过大家的平均水平很多，就容易招人嫉恨，一旦失利一次，很容易就会被落井下石。</p><p>　　所以，对于一件事，如果没有十足的把握，千万不要乱说。一旦被揪住错误，功劳就会被掩盖过去，失误会被无限放大，很容易遭到冷遇。</p><p>　　因此古人常说，君子“谨言慎行”。不要夸夸其谈，为了显示自己的能力见识，胡编乱造，不然很容易遭受祸患。遇到棘手的事情，不妨冷静思考，深思熟虑后再一语中的。</p><h2 id="懂了别多说"><a href="#懂了别多说" class="headerlink" title="懂了别多说"></a>懂了别多说</h2><div align="center"><br>口乃心之门，守口不密，泄尽真机；<br>意乃心之足，防意不严，走尽邪蹊。</div><div align="right"><br>——《菜根谭》</div><div align="center"><br><img src="/uploads/641.jpg" alt=" "><br></div><pre><code>人的嘴巴是心灵的大门，人要表达的意见、秘密、想法都是在嘴里说出去的，如果这道大门防守不严，那么内心的秘密就被悉数曝光，这样会惹大麻烦的。</code></pre><p>　　所以，并不是所有的事情都要在嘴巴里说出去的，有些事情留在自己心里就可以了。</p><p>　　曹操害怕有人暗自谋害自己，常吩咐侍卫们说：“我梦中好杀人，凡是我睡着的时候，你们切勿靠近我!”有一个晚上曹操在帐中睡觉，被子落到了地上，近侍慌忙取被为他覆盖。曹操立即跳起来拔剑把他杀了，然后继续上床睡觉。</p><p>　　半夜起来的时候，假装吃惊的问：“是谁杀了我的侍卫?”大家都以实相告。曹操痛哭，命人厚葬近侍。人们都以为曹操果真是在梦中杀人，惟有杨修知道了他的意图，下葬时叹惜的说：“不是丞相在梦中，是你在梦中呀!”曹操听到后十分厌恶杨修。终于在“鸡肋事件”中以扰乱军心为由，杀了杨修。</p><div align="center"><br><img src="/uploads/642.jpg" alt=" "><br></div><font color="green" size="4" face="黑体">《周易》里讲“吉人之辞寡，躁人之辞多。”<br><br>　　有吉德之人，自知为善不足，非不得已不讲话；急躁之人，急于自售，所以话说得多。祸从口出，该说的说，不该说的不要说，否则祸患就会降临。<br></font><h2 id="有话慢慢说"><a href="#有话慢慢说" class="headerlink" title="有话慢慢说"></a>有话慢慢说</h2><div align="center">心乱静中乱，心静乱中静。</div><br><div align="right">——《菜根谭》</div><pre><code>心里特别乱的时候，哪怕身边十分安静，内心也是十分混乱的。</code></pre><p>　　心里特别平静的时候，哪怕外面十分混乱，内心也是十分平和的。</p><p>　　人生总会遇到一些不如意的事情，当我们遭遇生命中挫折的时候，往往会紧张烦躁，情绪失控，口不择言。</p><p>　　这样的情况下，很容易祸从口出或者出口伤人。只有心态平复下来，内心安静下来，才能把纷乱复杂的局面处理好。</p><p><font color="green" size="4" face="黑体">《礼记》里讲，水深则流缓，语迟则人贵。</font></p><p>　　水越深，水流越是平缓，水面上虽然风起浪大，沉在深处的水还会保持着缓慢的速度。有修养的人说话都是慢悠悠的，而且不轻易表态，不轻易下定论，谨言慎行，说出的话犹如良药，迅速平息事态。</p><p>　　古人说，“宁静致远”，遇到事情，不要急躁，别急着下结论，静下心来好好想想，人生之路才能走得更远。<br></p><div align="center"><img src="/uploads/643.jpg" alt=" "></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div align=&quot;center&quot;&gt;&lt;br&gt;&lt;img src=&quot;/uploads/640.jpg&quot; alt=&quot; &quot;&gt;&lt;br&gt;&lt;/div&gt;

&lt;h2 id=&quot;不懂别乱说&quot;&gt;&lt;a href=&quot;#不懂别乱说&quot; class=&quot;headerlink&quot; title=&quot;不懂别乱说&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="中国经济网" scheme="http://Crystalqt.github.io/categories/%E4%B8%AD%E5%9B%BD%E7%BB%8F%E6%B5%8E%E7%BD%91/"/>
    
    
      <category term="警言" scheme="http://Crystalqt.github.io/tags/%E8%AD%A6%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>第一节 前言  CPA考试及准备</title>
    <link href="http://Crystalqt.github.io/2018/01/27/CPA%E8%80%83%E8%AF%95%E5%8F%8A%E5%87%86%E5%A4%87/"/>
    <id>http://Crystalqt.github.io/2018/01/27/CPA考试及准备/</id>
    <published>2018-01-27T12:25:50.000Z</published>
    <updated>2018-01-27T14:05:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>CPA(注册会计师)，我的学习是边工作边通过百题斩视频自学的，在这里简单的整理下我的经验及学习过程，也希望能够帮到跟我一样的人！<br>CPA的简介可以参考<a href="http://www.baike.com/wiki/注册会计师考试" target="_blank" rel="noopener">注册会计师考试</a></p><div align="center"><br><font color="black" size="5" face="黑体">前言</font><br></div><h1 id="考试情况介绍"><a href="#考试情况介绍" class="headerlink" title="考试情况介绍"></a>考试情况介绍</h1><font color="black" size="3" face="花文隶书"><br>     注册会计师(CPA),是指取得注册会计师证书并在会计师事务所执业的人员,英文全称 Certified Public Accountant,简称为 CPA,指的是从事社会审计/中介审计/独立审计的专业人 士,CPA 为中国唯一官方认可的注册会计师资质,唯一拥有签字权的执业资质。<br>    目前 CPA 考试分为专业阶段和综合阶段,本课程介绍的内容均为专业阶段考试内容。<br>    专业阶段考试科目:会计、审计、财务成本管理、公司战略与风险管理、经济法、税法 6 个科目。<br>    考试报名科目搭配技巧(个人观点): 报考两科建议:会计+审计、税法+经济法、财务成本管理+公司战略与风险管理<br>    报考三科建议:会计+审计+税法 or 经济法、财务成本管理+公司战略与风险管理+税法<br>or 经济法<br>    报考四科建议:会计+审计+税法+经济法、财务成本管理+公司战略与风险管理+税法+<br>经济法<br>    报考五科建议:会计+审计+税法 or 经济法+财务成本管理+公司战略与风险管理<br>    报考六科:对不起无法给出建议!<br>    专业阶段考试的单科考试合格成绩 5 年内有效。对在连续 5 个年度考试中取得专业阶段全部科目考试合格成绩的应考人员,财政部考委会颁发专业阶段考试合格证书。<br>    考试采用闭卷、计算机化考试(简称机考)方式。即,在计算机终端获取试题、作答并<br>提交答案。<br>    考试系统支持 8 种输入法:微软拼音输入法、全拼输入法、智能 ABC 输入法、谷歌拼音<br>输入法、搜狗拼音输入法、王码五笔型输入法、极品五笔输入法、万能五笔输入法。<br><div align="center"><br><img src="/uploads/CPA.jpg" alt="CPA证书"></div><br></font><h1 id="一、考试题型和题量、时间"><a href="#一、考试题型和题量、时间" class="headerlink" title="一、考试题型和题量、时间"></a>一、考试题型和题量、时间</h1><h2 id="1-题型"><a href="#1-题型" class="headerlink" title="1.题型"></a>1.题型</h2><font color="black" size="3" face="华文隶书">单项选择题<br>多项选择题<br>计算分析题<br>综合题</font><h2 id="2-考试时间为：180分钟（3小时）"><a href="#2-考试时间为：180分钟（3小时）" class="headerlink" title="2.考试时间为：180分钟（3小时）"></a>2.考试时间为：180分钟（3小时）</h2><h2 id="3-题量"><a href="#3-题量" class="headerlink" title="3.题量"></a>3.题量</h2><table><thead><tr><th style="text-align:center">题型</th><th style="text-align:center">2016-2017年</th><th style="text-align:center"></th><th style="text-align:center">2015年</th><th style="text-align:center"></th><th style="text-align:center">2014年</th><th style="text-align:center"></th></tr></thead><tbody><tr><td style="text-align:center"></td><td style="text-align:center">数量</td><td style="text-align:center">分数</td><td style="text-align:center">数量</td><td style="text-align:center">分数</td><td style="text-align:center">数量</td><td style="text-align:center">分数</td></tr><tr><td style="text-align:center">单项选择题</td><td style="text-align:center">12</td><td style="text-align:center">24</td><td style="text-align:center">12</td><td style="text-align:center">24</td><td style="text-align:center">12</td><td style="text-align:center">24</td></tr><tr><td style="text-align:center">多项选择题</td><td style="text-align:center">10</td><td style="text-align:center">20</td><td style="text-align:center">10</td><td style="text-align:center">20</td><td style="text-align:center">10</td><td style="text-align:center">20</td></tr><tr><td style="text-align:center">计算分析题</td><td style="text-align:center">2</td><td style="text-align:center">20</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td><td style="text-align:center">-</td></tr><tr><td style="text-align:center">综合题</td><td style="text-align:center">2</td><td style="text-align:center">36</td><td style="text-align:center">4</td><td style="text-align:center">56</td><td style="text-align:center">4</td><td style="text-align:center">56</td></tr><tr><td style="text-align:center">英语附加题</td><td style="text-align:center"></td><td style="text-align:center">5</td><td style="text-align:center"></td><td style="text-align:center">5</td><td style="text-align:center"></td><td style="text-align:center">5</td></tr><tr><td style="text-align:center">合计</td><td style="text-align:center">26</td><td style="text-align:center">105</td><td style="text-align:center">26</td><td style="text-align:center">105</td><td style="text-align:center">26</td><td style="text-align:center">105</td></tr></tbody></table><h1 id="二、命题规律"><a href="#二、命题规律" class="headerlink" title="二、命题规律"></a>二、命题规律</h1><font color="black" size="3" face="华文隶书">1.全方位考核,侧重知识的理解和应用;<br>2.重点内容突出,考核方式灵活多变;<br>3.各章节知识点之间融会贯通。</font><h1 id="三、教材基本结构（2017版）"><a href="#三、教材基本结构（2017版）" class="headerlink" title="三、教材基本结构（2017版）"></a>三、教材基本结构（2017版）</h1><font color="black" size="3" face="华文隶书">四部分 21 章<br>第一部分:会计基本理论(第 1 章、第 21 章)<br>第二部分:会计要素的确认、计量和记录(第 3——11 章)<br>第三部分:特殊业务的会计处理(第 2 章、第 12——16 章、第 19 章 )<br>第四部分:财务报告(第 17、18、20 章)</font><h1 id="2017-年-CPA·会计考题分析"><a href="#2017-年-CPA·会计考题分析" class="headerlink" title="2017 年 CPA·会计考题分析"></a>2017 年 CPA·会计考题分析</h1><font color="black" size="3" face="华文隶书">1.考核全面<br>2.题量适中<br>3.整体难度比以前年度有所提高<br>4.重点内容考核突出<br>5.侧重基础知识及职业判断的考核<br>6.题目大多源之于实务工作</font><h1 id="现阶段复习建议"><a href="#现阶段复习建议" class="headerlink" title="现阶段复习建议"></a>现阶段复习建议</h1><font color="black" size="3" face="华文隶书"><br>距离 2018 年 CPA 专业阶段考试约有 10 个月的时间,大体可将时间分为三段:<br>第一段:2017 年 11 月——2018 年 4 月(预习期)<br>第二段:2018 年 4 月——2018 月 9 月(基础期)<br>第三段:2018 年 9 月——2018 年 10 月(冲刺期)<br>1.根据自己的基础制定科学的学习计划;<br>(1)有基础 (2)无基础 (3)有基础时间少(4)有基础科目多<br>2.适当关注政策热点,不要盲目复习;<br>3.科学利用其它课程的学习巩固 CPA 的复习。<br></font> <h1 id="本课程体系介绍"><a href="#本课程体系介绍" class="headerlink" title="本课程体系介绍"></a>本课程体系介绍</h1><font color="black" size="3" face="华文隶书"><br>本课程主要针对基础薄弱或零基础的考生,分以下专题介绍:<br>专题一:会计基础理论知识铺垫<br>专题二:流动资产、流动负债<br>专题三:资金时间价值<br>专题四:涉税会计核算 专题五:预习各章应关注问题<br></font><h1 id="参考文献归百题斩所有"><a href="#参考文献归百题斩所有" class="headerlink" title="参考文献归百题斩所有"></a>参考文献归百题斩所有</h1><p><a href="http://www.baitizhan.com/" target="_blank" rel="noopener">百题斩</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;CPA(注册会计师)，我的学习是边工作边通过百题斩视频自学的，在这里简单的整理下我的经验及学习过程，也希望能够帮到跟我一样的人！&lt;br&gt;CPA的简介可以参考&lt;a href=&quot;http://www.baike.com/wiki/注册会计师考试&quot; target=&quot;_blank&quot;
      
    
    </summary>
    
      <category term="CPA" scheme="http://Crystalqt.github.io/categories/CPA/"/>
    
    
      <category term="预习班" scheme="http://Crystalqt.github.io/tags/%E9%A2%84%E4%B9%A0%E7%8F%AD/"/>
    
  </entry>
  
  <entry>
    <title>Mac同时安装jdk1.7，1.8</title>
    <link href="http://Crystalqt.github.io/2018/01/27/Mac%E5%90%8C%E6%97%B6%E5%AE%89%E8%A3%85jdk1-7%EF%BC%8C1-8/"/>
    <id>http://Crystalqt.github.io/2018/01/27/Mac同时安装jdk1-7，1-8/</id>
    <published>2018-01-27T11:52:24.000Z</published>
    <updated>2018-01-27T12:06:17.000Z</updated>
    
    <content type="html"><![CDATA[<font color="black" size="4" face="黑体">安装jdk.dmp文件过程略，全是点点点，直接命令加代码走起。<br>1. 启动终端Terminal<br>2. 进入当前用户的home目录<br>输入cd ~<br>3. 创建.bash_profile,命令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch .bash_profile      <span class="comment">#touch 命令换成vim直接编译也可以，我使用vim，比较方便</span></span><br></pre></td></tr></table></figure><br><br>4. 编辑vim .bash_profile，添加代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;PATH&#125;</span>:/usr/<span class="built_in">local</span>/mysql/bin</span><br><span class="line"><span class="comment"># 设置 JDK 7</span></span><br><span class="line"><span class="built_in">export</span> JAVA_7_HOME=`/usr/libexec/java_home -v 1.7`</span><br><span class="line"><span class="comment"># 设置 JDK 8</span></span><br><span class="line"><span class="built_in">export</span> JAVA_8_HOME=`/usr/libexec/java_home -v 1.8`</span><br><span class="line"></span><br><span class="line"><span class="comment">#默认JDK 7</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=<span class="variable">$JAVA_7_HOME</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#alias命令动态切换JDK版本</span></span><br><span class="line"><span class="built_in">alias</span> jdk7=<span class="string">"export JAVA_HOME=<span class="variable">$JAVA_7_HOME</span>"</span></span><br><span class="line"><span class="built_in">alias</span> jdk8=<span class="string">"export JAVA_HOME=<span class="variable">$JAVA_8_HOME</span>"</span></span><br></pre></td></tr></table></figure><br><br>然后保存。<br>5. 执行.bash_profile生效新配置，命令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> .bash_profile</span><br></pre></td></tr></table></figure><br><br>6. 查看java版本，命令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure><br><br>如果要换jdk1.8，则把.bash_profile中代码更改下，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> JAVA_HOME=<span class="variable">$JAVA_7_HOME</span>改为<span class="built_in">export</span> JAVA_HOME=<span class="variable">$JAVA_8_HOME</span></span><br></pre></td></tr></table></figure><br><br>这样就可以来回切换了，OVER！<br></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;font color=&quot;black&quot; size=&quot;4&quot; face=&quot;黑体&quot;&gt;安装jdk.dmp文件过程略，全是点点点，直接命令加代码走起。&lt;br&gt;1. 启动终端Terminal&lt;br&gt;2. 进入当前用户的home目录&lt;br&gt;输入cd ~&lt;br&gt;3. 创建.bash_profil
      
    
    </summary>
    
      <category term="Android" scheme="http://Crystalqt.github.io/categories/Android/"/>
    
    
      <category term="android" scheme="http://Crystalqt.github.io/tags/android/"/>
    
      <category term="jkd1.7" scheme="http://Crystalqt.github.io/tags/jkd1-7/"/>
    
  </entry>
  
  <entry>
    <title>Mac搭建android6.0编译环境及导入AndroidStudio</title>
    <link href="http://Crystalqt.github.io/2018/01/26/Mac%E6%90%AD%E5%BB%BAandroid6-0%E7%BC%96%E8%AF%91%E7%8E%AF%E5%A2%83%E5%8F%8A%E5%AF%BC%E5%85%A5AndroidStudio/"/>
    <id>http://Crystalqt.github.io/2018/01/26/Mac搭建android6-0编译环境及导入AndroidStudio/</id>
    <published>2018-01-26T08:30:15.000Z</published>
    <updated>2018-01-26T14:29:20.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mac-配置"><a href="#Mac-配置" class="headerlink" title="Mac 配置"></a>Mac 配置</h1><p>版本：10.11.6<br>内存：16GB<br>准备：Xcode5.0.2（android 6.0 源码其他的Xcode编译出问题） git  jdk 1.7 AndroidStudio</p><p>这里git  jdk  Android Studio安装就不介绍了。</p><h1 id="Xcode-安装"><a href="#Xcode-安装" class="headerlink" title="Xcode 安装"></a>Xcode 安装</h1><p>官网下载<a href="https://developer.apple.com/download/more/" target="_blank" rel="noopener">Xcode5.0.2</a><br>Mac 10.11.6版本与Xcode 5.0.2是完全不匹配的，只是使用它的SDK而已，其余的Xcode版本都会报错；查看Xcode的MacOSX＊.sdk版本路径如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Application/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX....</span><br></pre></td></tr></table></figure></p><p>确定好了MacOSX的版本，在Android 6.0源码中build/core/combo/mac_version.mk脚本中写好相应的版本是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mac_sdk_versions_supported := 10.6 10.7 10.8 10.9</span><br></pre></td></tr></table></figure></p><h1 id="Mac搭建Android-6-0-编译环境"><a href="#Mac搭建Android-6-0-编译环境" class="headerlink" title="Mac搭建Android 6.0 编译环境"></a>Mac搭建Android 6.0 编译环境</h1><p>Android 6.0 在Mac上编译，MAC系统是大小写不敏感的，因此首先创建一个大小写敏感的空间，命令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hdiutil create -<span class="built_in">type</span> SPARSE -fs <span class="string">'Case-sensitive Journaled HFS+'</span> -size 80g ~/android.dmg</span><br></pre></td></tr></table></figure></p><p>运行以上命令会创建一个80G大小写敏感文件系统。<br>生成分区之后，为了方便以后挂载该文件系统，可以创建一个function amountAndroid ，可以在~/.bash_profile 中添加代码如下:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mount the android file image</span></span><br><span class="line"><span class="keyword">function</span> mountAndroid &#123; hdiutil attach ~/android.dmg.sparseimage -mountpoint /Volumes/android;&#125;</span><br></pre></td></tr></table></figure></p><p>在终端中输入命令即可挂在我们大小写敏感的空间了，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mountAndroid</span><br></pre></td></tr></table></figure></p><p>然后将Android 6.0源码放到／Volumes／android／目录下，进行整个项目编译。</p><h1 id="Android-6-0导入Android-Studio中"><a href="#Android-6-0导入Android-Studio中" class="headerlink" title="Android 6.0导入Android Studio中"></a>Android 6.0导入Android Studio中</h1><p>我们整编Android 6.0 并声称android.ipr,命令如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">source</span> build/envsetup.sh</span><br><span class="line">$ lunch aosp_x86-eng <span class="comment">#(or pick your favorite lunch target)</span></span><br><span class="line">$ make</span><br><span class="line">$ mmm development/tools/idegen/</span><br><span class="line">$ development/tools/idegen/idegen.sh</span><br></pre></td></tr></table></figure></p><p>因为我这用的是Android Studio导入源码，所以我们只需要选择android.ipr这个文件即可.</p><p>最后打开Android Studio打开项目找到Android 6.0 项目源码中的android.ipr，双击选取即可将整个项目导入了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Mac-配置&quot;&gt;&lt;a href=&quot;#Mac-配置&quot; class=&quot;headerlink&quot; title=&quot;Mac 配置&quot;&gt;&lt;/a&gt;Mac 配置&lt;/h1&gt;&lt;p&gt;版本：10.11.6&lt;br&gt;内存：16GB&lt;br&gt;准备：Xcode5.0.2（android 6.0 源码其
      
    
    </summary>
    
      <category term="Android" scheme="http://Crystalqt.github.io/categories/Android/"/>
    
    
      <category term="Mac" scheme="http://Crystalqt.github.io/tags/Mac/"/>
    
      <category term="Android 6.0" scheme="http://Crystalqt.github.io/tags/Android-6-0/"/>
    
      <category term="AndroidStudio" scheme="http://Crystalqt.github.io/tags/AndroidStudio/"/>
    
      <category term="Xcode 5.0.2" scheme="http://Crystalqt.github.io/tags/Xcode-5-0-2/"/>
    
  </entry>
  
  <entry>
    <title>Linux下压缩和解压缩命令</title>
    <link href="http://Crystalqt.github.io/2018/01/26/Linux%E4%B8%8B%E5%8E%8B%E7%BC%A9%E5%92%8C%E8%A7%A3%E5%8E%8B%E7%BC%A9%E5%91%BD%E4%BB%A4/"/>
    <id>http://Crystalqt.github.io/2018/01/26/Linux下压缩和解压缩命令/</id>
    <published>2018-01-26T07:25:35.000Z</published>
    <updated>2018-01-26T07:47:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>范例： </p><p>.tar<br>解包：tar -xvf FileName.tar<br>打包：tar -cvf FileName.tar DirName<br>注：tar是打包，不是压缩！</p><hr><p>.gz<br>解压1：gunzip FileName.gz<br>解压2：gzip -d FileName.gz<br>压缩：gzip FileName </p><hr><p>.tar.gz<br>解压：tar zxvf FileName.tar.gz<br>压缩：tar zcvf FileName.tar.gz DirName </p><hr><p>.bz2<br>解压1：bzip2 -d FileName.bz2<br>解压2：bunzip2 FileName.bz2<br>压缩： bzip2 -z FileName </p><hr><p>.tar.bz2<br>解压：tar jxvf FileName.tar.bz2<br>压缩：tar jcvf FileName.tar.bz2 DirName </p><hr><p>.bz<br>解压1：bzip2 -d FileName.bz<br>解压2：bunzip2 FileName.bz<br>压缩：未知 </p><hr><p>.tar.bz<br>解压：tar jxvf FileName.tar.bz<br>压缩：未知 </p><hr><p>.Z<br>解压：uncompress FileName.Z<br>压缩：compress FileName </p><hr><p>.tar.Z<br>解压：tar Zxvf FileName.tar.Z<br>压缩：tar Zcvf FileName.tar.Z DirName </p><hr><p>.tgz<br>解压：tar zxvf FileName.tgz<br>压缩：未知 </p><hr><p>.tar.tgz<br>解压：tar zxvf FileName.tar.tgz<br>压缩：tar zcvf FileName.tar.tgz FileName </p><hr><p>.zip<br>解压：unzip FileName.zip<br>压缩：zip FileName.zip DirName </p><hr><p>.rar<br>解压：rar a FileName.rar<br>压缩：rar e FileName.rar </p><hr><p>压缩解压缩<br>zip文件：<br>功能说明：压缩文件。 </p><p>语　　法：zip [-AcdDfFghjJKlLmoqrSTuvVwXyz$][-b &lt;工作目录&gt;][-ll][-n &lt;字尾字符串&gt;][-t &lt;日期时间&gt;][-&lt;压缩效率&gt;][压缩文件][文件…][-i &lt;范本样式&gt;][-x &lt;范本样式&gt;] </p><p>补充说明：zip是个使用广泛的压缩程序，文件经它压缩后会另外产生具有”.zip”扩展名的压缩文件。 </p><p>参　　数：<br>-A 调整可执行的自动解压缩文件。<br>-b&lt;工作目录&gt; 指定暂时存放文件的目录。 </p><p>-c 替每个被压缩的文件加上注释。<br>-d 从压缩文件内删除指定的文件。<br>-D 压缩文件内不建立目录名称。<br>-f 此参数的效果和指定”-u”参数类似，但不仅更新既有文件，如果某些文件原本不存在于压缩文件内，使用本参数会一并将其加入压缩文件中。<br>-F 尝试修复已损坏的压缩文件。<br>-g 将文件压缩后附加在既有的压缩文件之后，而非另行建立新的压缩文件。<br>-h 在线帮助。<br>-i&lt;范本样式&gt; 只压缩符合条件的文件。<br>-j 只保存文件名称及其内容，而不存放任何目录名称。<br>-J 删除压缩文件前面不必要的数据。<br>-k 使用MS-DOS兼容格式的文件名称。<br>-l 压缩文件时，把LF字符置换成LF+CR字符。<br>-ll 压缩文件时，把LF+CR字符置换成LF字符。<br>-L 显示版权信息。<br>-m 将文件压缩并加入压缩文件后，删除原始文件，即把文件移到压缩文件中。<br>-n&lt;字尾字符串&gt; 不压缩具有特定字尾字符串的文件。<br>-o 以压缩文件内拥有最新更改时间的文件为准，将压缩文件的更改时间设成和该文件相同。<br>-q 不显示指令执行过程。<br>-r 递归处理，将指定目录下的所有文件和子目录一并处理。<br>-S 包含系统和隐藏文件。<br>-t&lt;日期时间&gt; 把压缩文件的日期设成指定的日期。<br>-T 检查备份文件内的每个文件是否正确无误。<br>-u 更换较新的文件到压缩文件内。<br>-v 显示指令执行过程或显示版本信息。<br>-V 保存VMS操作系统的文件属性。<br>-w 在文件名称里假如版本编号，本参数仅在VMS操作系统下有效。<br>-x&lt;范本样式&gt; 压缩时排除符合条件的文件。<br>-X 不保存额外的文件属性。<br>-y 直接保存符号连接，而非该连接所指向的文件，本参数仅在UNIX之类的系统下有效。<br>-z 替压缩文件加上注释。<br>-$ 保存第一个被压缩文件所在磁盘的卷册名称。<br>-&lt;压缩效率&gt; 压缩效率是一个介于1-9的数值。 </p><hr><p>rar文件： </p><p>Rar 用法: rar ＜命令＞ -＜选项1＞ ….-＜选项N＞ ＜操作文档＞ ＜文件…＞ ＜@文件列表…＞ ＜解压路径＞ h/](J k!P x l”w:G v K q7i6v </p><p>　　通常rar命令由一个主命令加若干选项（可选）构成，操作文档为操作施加的.rar文件对象，文件或文件列表为对操作文档实现修饰的具体文件或目录（可选）。 </p><p>　　Y0`-o r#V r n ~”p9f5N rar常用命令主要有: </p><p>　　1) a 添加文件到操作文档 举例rar a test.rar file1.txt </p><p>　　若test.rar文件不存在，则打包file1.txt文件成test.rar rar a test.rar file2.txt 若test.rar文件已经存在，则添加file2.txt文件到test.rar中(这样 test.rar中就有两个文件了）注，如果操作文档中已有某文件的一份拷贝，则a命令更新该文件 另，对目录也可以进行操作 eg. rar a test.rar dir1 。 </p><p>　　2) e test.rar 注，用e解压的话，不仅原来的file1.txt和file2.txt被解压到当前目录，就连dir1里面的所有文件也被解压到当前目录下，不能保持压缩前的目录结构，如果想保持压缩前的目录结构，用x解压。 </p><p>　　3) c 对操作文档添加说明注释 eg. rar c test.rar </p><p>　　（会出现Reading comment from stdin字样，然后输入一行或多行注释，以ctrl+d结束）。 </p><p>　　4) cf 添加文件注释，类似上面的c，不过这个是对压缩文档中每个文件进行注释 cw 将文档注释写入文件 eg. rar cw test.rar comment.txt。 </p><p>　　5) d 从文档中删除文件 eg. rar d test.rar file1.txt e </p><p>　　将文件解压到当前目录 eg. rar。 </p><p>　　6) e test.rar 注，用e解压的话，不仅原来的file1.txt和file2.txt被解压到当前目录，就连dir1里面的所有文件也被解压到当前目录下，不能保持压缩前的目录结构，如果想保持压缩前的目录结构，用x解压。 </p><p>　　7) r 修复文档 eg. rar r test.rar </p><p>　　当rar文件有问题时，可以尝试用该命令进行修复（鬼知道有多少用） 。 </p><p>　　8) s 转换文档成自解压文档 eg. rar s test.rar </p><p>　　会生成一个test.sfx的可执行文档，运行它的效果就相当于rar x test.rar， 适合于向没有rar的用户传输文件。 </p><p>　　9) t 检测文档 eg. rar t test.rar </p><p>　　检测test.rar的完整性。 </p><p>　　10) k 锁定文档 eg. rar k test.rar </p><p>　　锁定文档后，该文档就无法进行任何更新操作了。 </p><hr><p>.Z文件：<br>命令： compress<br>格式： compress 选项 文件列表<br>功能： 用Lempel-ziv压缩方法来压缩文件或压缩标准输入<br>选项： -r 递归操作，如果指定目录变元，则压缩该目录及其子目录中的所有文件。<br>-c 将压缩数据返回标准输出，而缺省情况下为压缩文件时将压缩数据返回文件。<br>-v 显示每个文件夹的压缩百分比。<br>解释： 在用compress压缩文件时，将在原文件名之后加上扩展名.Z。如果不指定文件，则压缩标准输入，其结果返回标准输出。<br>实例： 目的：压缩/mnt/lgx/a1.doc文件<br>命令：＃compress /mnt/lgx/a1.doc<br>结果：压缩后生成a1.doc.Z文件。 </p><p>命令： uncompress<br>格式： uncompress 选项 文件列表<br>功能： 解压缩用compress 程序压缩过的文件<br>选项： -c 它将压缩数据发往标准输出而不是改写旧的压缩文件<br>解释： 如果不指定文件，则解压缩标准输入。缺省-c时，为解压缩。<br>实例： 目的：解压缩/mnt/lgx/a1.doc.Z<br>命令：# uncompress /mnt/lgx/a1.doc.Z </p><hr><p>.gz文件： </p><p>命令： gzip<br>格式： gzip 选项 文件目录列表<br>功能： 用Lempel-ziv编码压缩文件<br>选项： -c 压缩结果写入标准输出，原文件保持不变。缺省时gzip将原文件压缩为.gz文件，并删除原文件。<br>-v 输出处理信息。<br>-d 解压缩指定文件。<br>-t 测试压缩文件的完整性。<br>解释： 值得一提的是，gzip比compress压缩更加有效。<br>实例： 目的：压缩/mnt/lgx/a1.doc<br>命令：＃gzip -v /mnt/lgx/a1.doc<br>结果：产生a1.doc.gz的压缩文件 </p><p>命令： gunzip<br>格式： gunzip 选项 文件列表<br>功能： 解压缩用gzip命令（以及compress和zip命令）压缩过的文件<br>选项： -c 将输出写入标准输出，原文件保持不变。缺省时，gunzip将压缩文件变成解压缩文件。<br>-l 列出压缩文件中的文件而不解压缩。<br>-r 递归解压缩，深入目录结构中，解压缩命令行变元所指定目录中的所有子目录内的文件。<br>实例： 目的：解压缩/mnt/lgx/a1.doc.gz<br>命令：＃gunzip /mnt/lgx/a1.doc.gz </p><hr><p>.tar文件： </p><p>命令： tar<br>格式： tar 选项 文件目录列表<br>功能： 对文件目录进行打包备份<br>选项： -c 建立新的归档文件<br>-r 向归档文件末尾追加文件<br>-x 从归档文件中解出文件<br>-O 将文件解开到标准输出<br>-v 处理过程中输出相关信息<br>-f 对普通文件操作<br>-z 调用gzip来压缩归档文件，与-x联用时调用gzip完成解压缩<br>-Z 调用compress来压缩归档文件，与-x联用时调用compress完成解压缩<br>实例1： 目的：用tar打包一个目录下的文件<br>命令：＃tar -cvf /mnt/lgx/a1.doc<br>结果：产生一个以.tar为扩展名的打包文件<br>实例2： 目的：用tar解开打包文件<br>命令：＃tar -xvf /mnt/lgx/a1.doc.tar<br>附加说明：在通常情况下，tar打包与gzip（压缩）经常联合使用，效果更好。方法是：<br>首先用tar打包，如：＃tar -cvf /mnt/lgx/a1.doc （产生a1.doc.tar文件）<br>然后用gzip压缩a1.doc.tar文件，如：＃gzip /mnt/lgx/a1.doc.tar （产生a1.doc.tar.gz文件）<br>实例3： 目的：解压a1.doc.tar.gz文件<br>方法1：<br>＃gzip -dc /mnt/lgx/a1.doc.tar.gz （产生a1.doc.tar文件）<br>＃tar -xvf /mnt/lgx/a1.doc.tar （产生a1.doc文件）<br>这两次命令也可使用管道功能，把两个命令合二为一：<br>＃gzip -dc /mnt/lgx/a1.doc.tar.gz | tar -xvf<br>方法2：使用tar提供的自动调用gzip解压缩功能<br>＃tar -xzvf /mnt/lgx/a1.doc.tar.gz<br>经过tar打包后，也可用compress命令压缩（注：gzip比compress压缩更加有效），产生一个以.tar.Z的文件，在解包时，可先用 “uncompress 文件名”格式解压，然后用“tar -xvf 文件名”解包。也可直接调用“tar -Zxvf 文件名”解包。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;范例： &lt;/p&gt;
&lt;p&gt;.tar&lt;br&gt;解包：tar -xvf FileName.tar&lt;br&gt;打包：tar -cvf FileName.tar DirName&lt;br&gt;注：tar是打包，不是压缩！&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;.gz&lt;br&gt;解压1：gunzip FileName
      
    
    </summary>
    
      <category term="SCM" scheme="http://Crystalqt.github.io/categories/SCM/"/>
    
    
      <category term="Linux" scheme="http://Crystalqt.github.io/tags/Linux/"/>
    
      <category term="压缩" scheme="http://Crystalqt.github.io/tags/%E5%8E%8B%E7%BC%A9/"/>
    
      <category term="解压" scheme="http://Crystalqt.github.io/tags/%E8%A7%A3%E5%8E%8B/"/>
    
  </entry>
  
  <entry>
    <title>你的格局决定你的结局</title>
    <link href="http://Crystalqt.github.io/2018/01/26/%E4%BD%A0%E7%9A%84%E6%A0%BC%E5%B1%80%E5%86%B3%E5%AE%9A%E4%BD%A0%E7%9A%84%E7%BB%93%E5%B1%80/"/>
    <id>http://Crystalqt.github.io/2018/01/26/你的格局决定你的结局/</id>
    <published>2018-01-26T01:56:56.000Z</published>
    <updated>2018-01-26T02:12:52.000Z</updated>
    
    <content type="html"><![CDATA[<font color="blue" size="4" face="华文隶书">有一句话说得好，你的心有多宽，你的舞台就有多大；你的格局有多大，你的心就能有多宽！放大你的格局，你的人生将不可思议！</font><p>一家庭妇女买了件衣服，习惯性地跟邻居显摆，却发现同样的衣服邻居比她少花了20元钱，于是她耿耿于怀数天。这人的格局就值20元钱了。</p><p>有一个乞丐，整天在街上乞讨，对路上衣着光鲜的人毫无感觉，却嫉妒比自己乞讨得多的乞丐，这人估计一直就是个乞丐了。</p><p>三个工人在工地砌墙，有人问他们在干嘛？第一个人没好气说：砌墙，你没看到吗？第二个人笑笑：我们在盖一幢高楼。第三个人笑容满面：我们正在建一座新城市。10年后，第一个人仍在砌墙，第二个人成了工程师，而第三个人，是前两个人的老板。</p><font color="blue" size="4" face="黑体">“再大的烙饼也大不过烙它的锅。”</font> 我们所希望的未来就好像这张大饼一样，是否能烙出满意的“大饼”，完全取决于烙它的那口“锅”，这就是所谓的“格局”。<br><br><font color="blue" size="4" face="黑体">格局就是指一个人的眼光、胸襟、胆识等心理要素的内在布局。</font><p>一个人的发展往往受局限，其实“局限”就是格局太小，为其所限。</p><p>谋大事者必要布大局，对于人生这盘棋来说，我们首先要学习的不是技巧，而是布局。</p><p>大格局，即以大视角切入人生，力求站得更高、看得更远、做得更大。大格局决定着事情发展的方向，掌控了大格局，也就掌控了局势。</p><font color="blue" size="4" face="黑体">在人与人的对弈中，舍卒保车、飞象跳马等种种棋招就如人生中的每一次博弈，棋局的赢家往往是那些有着先予后取的度量、统筹全局的高度、运筹帷幄而决胜千里的方略与气势的棋手。</font><h1 id="1、眼光"><a href="#1、眼光" class="headerlink" title="1、眼光"></a>1、眼光</h1><p>眼光是指在某一时刻，对某领域趋势准确预测的能力 。</p><p>第一，你能不能看到别人看不到的东西，能不能够透过表象看到事物发展的本质。</p><p>第二，对于事物的评判已经有自己的标准，并能够极为准确的根据现在对未来进行预测。 </p><p>第三，你知道这些道理之后，自己能不能做得到。</p><p>而对于未来的准确预测，亦是在坚持看清本质的原则之上的。比如雷军做小米手机，他很明白大众的消费能力，理解大众的消费需求标准，他看到了基于互联网的消费者产品是品牌发展的趋势，他知道超过用户预期的产品必然带来超好的口碑。</p><font color="blue" size="4" face="黑体">人贵有自知之明，知道什么可为和不可为。若不可为，怎样做才能可为，那何时可为。</font><h1 id="2、胸襟"><a href="#2、胸襟" class="headerlink" title="2、胸襟"></a>2、胸襟</h1><p>有大的追求，大的愿望，就会有大的忍耐，大的包容，大的视野，大的宽容，这就叫大胸怀吧。</p><font color="blue" size="4" face="黑体">如果你的想法是追求一个具体的、很小的事情，你得不到它会很生气；<br><br>如果你想要的是别人没有的，是很大的东西，很远的东西，你就会变得能够理解很多，包容很多，能够承受痛苦。</font><p>这是一个正循环。</p><p>刘邦和项羽，从军事领导力上看，项羽远胜于刘邦，巨鹿之战，破釜沉舟是何等气概；从兵力配置上看，项羽手下强将如云，整体实力也优于刘邦；从智囊团上看，两者各有张良范增，也不分伯仲。</p><p>所以若综合三方面而言，项羽的楚军是远远强过刘邦的汉军的，但为什么最后自刎乌江的不是刘邦，而偏偏是项羽呢？</p><p>刘邦自己说过“我文不过萧何、治国不如张良、行军布阵不如韩信，但三人皆为我所用”。</p><p>再看看项羽，手下纵有范增、英布这样的文臣武将，但最终还是一败涂地。只因他不像刘邦那样胸怀广阔，单单为一个名义上的“西楚霸王”惹得众诸侯心生叛意、倒戈相向。</p><p>事事以自我为中心，刚愎自用，范增屡次进谏，但最后还是在鸿门宴上放走了刘邦，最为严重的是他竟对已缴械投降的近三十万秦军实行坑杀，使他的威信声誉瞬间被葬送。</p><h1 id="3、胆识"><a href="#3、胆识" class="headerlink" title="3、胆识"></a>3、胆识</h1><p>曾有企业家这样说，“如果是现在把我归零，我仍然可以再来一次”。</p><p>史玉柱则是在资产为负数，甚至负得还很多的时候站了起来。</p><p>当讨债人蜂拥而至之时，史玉柱庄重承诺：“欠老百姓的钱一定要还。”</p><p>也正是出于这种“还债”的动力，史玉柱终于东山再起，且赚钱后的第一件事情就是还债。之后，他如履薄冰，小心翼翼，在一片废墟上，炼就了超过500亿元的财富。</p><p>行军作战需要胆识，成功创业更需要胆识，只有想法却不敢去实现终究不会成功，莽撞行事也只会导致失败，有勇有谋才能事半功倍。</p><h1 id="4、心态"><a href="#4、心态" class="headerlink" title="4、心态"></a>4、心态</h1><p>有很多投资者，不做投资的时候，看到别人赚钱，总是在想：有什么赚钱的好项目呢？</p><p>真到做投资的时候，每个人都是抱着必赚的心理，所以一旦遇到亏损，与原来的期望不一致时，难免心态就出问题！</p><p>然后会出现各种状况。这里说的只是一种现象，如果将其放大，很多时候我们在面临未来的预期何曾不是另一种形式的投资行为。</p><font color="blue" size="4" face="黑体">所以说，格局真的决定人生层次。</font><p>格局在岳飞那里就是八千里路云和月，三千功名尘与土的壮烈；</p><p>格局在马致远那里却是小桥流水人家，断肠人在天涯的孤旅；</p><p>格局在苏轼那里就是我欲乘风归去，又恐琼楼玉宇，高处不胜寒的的寂寞。</p><font color="blue" size="4" face="黑体">一个人有多大的格局才有多大的胸襟。</font><p>格局是一种眼界，是一种大情怀，海纳百川才能有容乃大。</p><p>有什么样的眼界和胸襟，就看到什么样的风景。站在高处，整座城市不过就是几座楼房，在飞机上从云端俯瞰城市，城市也就变成了盆景。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;font color=&quot;blue&quot; size=&quot;4&quot; face=&quot;华文隶书&quot;&gt;有一句话说得好，你的心有多宽，你的舞台就有多大；你的格局有多大，你的心就能有多宽！放大你的格局，你的人生将不可思议！&lt;/font&gt;

&lt;p&gt;一家庭妇女买了件衣服，习惯性地跟邻居显摆，却发现同样的衣服邻
      
    
    </summary>
    
      <category term="THLDL领导力" scheme="http://Crystalqt.github.io/categories/THLDL%E9%A2%86%E5%AF%BC%E5%8A%9B/"/>
    
    
      <category term="THLDL领导力" scheme="http://Crystalqt.github.io/tags/THLDL%E9%A2%86%E5%AF%BC%E5%8A%9B/"/>
    
      <category term="格局" scheme="http://Crystalqt.github.io/tags/%E6%A0%BC%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>The Little Prince</title>
    <link href="http://Crystalqt.github.io/2018/01/24/The-Little-Prince/"/>
    <id>http://Crystalqt.github.io/2018/01/24/The-Little-Prince/</id>
    <published>2018-01-24T07:43:34.000Z</published>
    <updated>2018-01-27T11:39:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Chapter-1"><a href="#Chapter-1" class="headerlink" title="Chapter 1"></a><font color="black" size="4" face="kokonor">Chapter 1</font></h2><font color="black" size="4" face="kokonor">Once when I was six years old I saw a magnificent picture in a book,called True Stories from Nature,about the primeval forest. It was a picture of a boa constrictor in the act of swallowing an animal.Here is a copy of the drawing.<br><div align="center"><br><img src="/uploads/prince_1.jpg" alt="swallow"><br></div><br>In the boot it said:” Boa constrictors swallow their prey whole, without chewing it. After that they are not able to move,and they sleep through the six months that they need for digestion.”</font><hr><font color="red" size="3" face="kokonor">New Words<br>1.magnificent  adj  华丽的<br>2.primeval     adj  原始的<br>3.boa constrictor   蟒蛇，巨蟒<br>4.swallow      v    吞咽<br>5.drawing      n    图画，素描（画）<br>6.prey         n    猎物，捕获物<br>7.chew         v    咀嚼，嚼<br>8.digestion    n    消化<br></font><hr><h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a><font color="black" size="4" face="华文新魏">第一章</font></h2><font color="blue" size="3" face="华文隶书">六岁那年，我在书上看到一幅精美的图画，那是一本关于原始森林的书，名叫“真实的故事”。图上画的是一条蟒蛇正在吞食一头猛兽。这是那幅画的摹本。<br>书上这样写道：“蟒蛇会把猎物整个吞进去，根本不咀嚼。之后，它们就无法动弹了，在长达六个月的时间里，边睡觉边消化食物</font><hr><font color="black" size="4" face="kokonor">I pondered deeply, then,over the adventures of the jungle. And after some work with the colored pencil I successed in marking my first drawing. My Drawing Number One. It looked like this:<br><div aligh="center"><br><img src="/uploads/prince_2.jpg" alt="digest"><br></div><br>I showed my masterpiece to the grown-ups, and asked them whether the drawing frightened them.<br>But the answered:”Frighten?Why should any one be frightened by a hat?”<br>My draawing was not a picture of a hat. It was a picture of a hoa constrictor digesting an elephant. But since the grown-ups were not able to understand it. I made another drawing: I drew the inside of the boa constrictor,so that the grown-ups could see it clearly. They always need to have things explained. My Drawing Number Two looked like this:<br><div align="center"><br><img src="/uploads/prince_3.jpg" alt="elephant"><br></div><br></font><hr><font color="red" size="3" face="kokonor">New Words<br>1. ponder           v  自习思考，沉思<br>2. adventure        n  冒险，冒险经历，奇遇<br>3. jungle           n  丛林，密林<br>4. colored pencil      彩色铅笔<br>5. masterpiece      n  杰作<br>6. digest           v  消化</font><hr><font color="blue" size="3" face="华文隶书">随后，我便对丛林中的种种历险产生了无尽的遐想。我用彩色铅笔勾画出了我的处女作。我的一号作品，就是下面这样的：<br>我把自己的杰作拿给大人们看，问他们怕不怕。<br>他们回答说：“怕什么？一顶帽子有什么可怕的？”<br>我画的根本就不是一顶帽子，而是一条正在消化大象的蟒蛇。大人们看不懂，我只好又画了另一幅：把蟒蛇肚皮里的样子画出来，这样大人就能看清楚了。他们总是需要别人解释。我的二号作品是这样的：</font><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Chapter-1&quot;&gt;&lt;a href=&quot;#Chapter-1&quot; class=&quot;headerlink&quot; title=&quot;Chapter 1&quot;&gt;&lt;/a&gt;&lt;font color=&quot;black&quot; size=&quot;4&quot; face=&quot;kokonor&quot;&gt;Chapter 1&lt;/font
      
    
    </summary>
    
      <category term="English" scheme="http://Crystalqt.github.io/categories/English/"/>
    
    
      <category term="Chapter 1" scheme="http://Crystalqt.github.io/tags/Chapter-1/"/>
    
  </entry>
  
  <entry>
    <title>Git在研发中常用的命令</title>
    <link href="http://Crystalqt.github.io/2018/01/24/%E5%9C%A8%E7%A0%94%E5%8F%91%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4/"/>
    <id>http://Crystalqt.github.io/2018/01/24/在研发中常用的命令/</id>
    <published>2018-01-24T07:08:39.000Z</published>
    <updated>2018-01-24T08:13:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>Git是目前世界上最先进的分布式版本控制系统，由Linux创始人Linus在2005年开发，用于对抗商业版的版本控制工具BitKeeper，历史比较有意思，感兴趣的师傅们可以搜索了解一下。</p><p>分布式</p><p>首先要说明的是Git是一个分布式版本控制系统，重点在于分布式。也就是说我们从github上每clone下来一个项目，都是clone下一个完整的仓库，里面包含了远程仓库的所有信息。我们在clone的目录下会发现一个.git目录，这个目录就是本地仓库所在的位置，注意不要去修改这个目录，如果删除了这个目录，本地仓库及其相关信息都会消失。</p><p>工作区和版本库</p><p>这里的工作区指的是不包括.git目录的所有文件，你可以对工作区进行任意的修改，都不会影响到本地的仓库。<br>.git目录是本地仓库，也叫作版本库。版本库可以粗略的分为两个部分——暂存区和分支区，这两个区域是相互独立的。<br>我们使用“git add”命令把工作区的文件修改添加到暂存区，使用“git commit”命令把暂存区的文件修改提交到当前分支。如下面两幅图，暂存区译为stage。</p><div align="center"><br><img src="/uploads/git.png" alt="git图"><br></div><p>暂存区是Git非常重要的特性，需要仔细理解。<br>分支<br>每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。当只有一个分支时，这个分支叫主分支，即master分支。<br>一开始的时候，master分支是一条线，Git让master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点。每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长.</p><h1 id="代码修改及提交命令"><a href="#代码修改及提交命令" class="headerlink" title="代码修改及提交命令"></a>代码修改及提交命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git status        // 查看当前代码修改的状态</span><br><span class="line">git diff [文件名]         // 查看文件修改</span><br><span class="line">git add [文件名]   // 将修改的文件添加到git暂存区</span><br><span class="line">git add .    // 将当前目录下所有修改文件都添加到暂存区</span><br><span class="line">git add *                         // 同上</span><br><span class="line">git rm [文件名]                   // 删除文件并添加到git暂存区</span><br><span class="line">git commit –m “注释内容”          // 将暂存区的文件修改，添加注释，修改详细信息</span><br><span class="line">git push 服务器的提交路径 本地分支名              //提交本地修改到服务器代码库</span><br></pre></td></tr></table></figure><h1 id="历史提交信息查看、回退"><a href="#历史提交信息查看、回退" class="headerlink" title="历史提交信息查看、回退"></a>历史提交信息查看、回退</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> //查看当前所有的commit的<span class="built_in">log</span>信息</span><br><span class="line">git show commit_id           //查看commit_id的详细修改信息</span><br><span class="line">git reset –soft commit_id       //回退到某commit_id条<span class="built_in">log</span>信息，但不会回退本地修改;若你修改代码已经git commit了，突然发现当前代码不是自己需要的，需要回退之前的样子，就可以执行git reset –soft commit_id命令来回退之前的commit提交。</span><br><span class="line">git reset HEAD 文件名        //撤销当前文件添加到暂存区</span><br><span class="line">git checkout 文件名          //撤销某文件的修改</span><br><span class="line">git <span class="built_in">log</span> --graph              //查看自己的提交记录</span><br><span class="line">git reflog                   //查看自己的操作历史</span><br><span class="line">git blame [FILE_PATH]        //查看文件的每一部分最后由谁改动</span><br></pre></td></tr></table></figure><h1 id="Patch制作，合入"><a href="#Patch制作，合入" class="headerlink" title="Patch制作，合入"></a>Patch制作，合入</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git format-patch –s [commit-id]       //打patch命令，-s参数代表循环;这里不加-s就是打某一条的patch，有-s这个参数就可以打很多条了，就看是第几条的commit-id了。</span><br><span class="line">git reset –hard commit-id             //移动<span class="built_in">log</span>信息指针</span><br><span class="line">git am [patch_name]                   //合入某条patch的命令</span><br></pre></td></tr></table></figure><h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch  //查看所有的分支</span><br><span class="line">git checkout 分支名              //创建一个新的分支</span><br><span class="line">git checkout –b 分支名           //创建一个新的分支名并且切换到此分支上</span><br></pre></td></tr></table></figure><h1 id="Repo命令"><a href="#Repo命令" class="headerlink" title="Repo命令"></a>Repo命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">repo status                    //查看所有git库的状态</span><br><span class="line">repo diff                      //查看所有git库的修改</span><br><span class="line">repo forall –c git branch 分支名  //将所有git库建立同一个分支名</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;Git是目前世界上最先进的分布式版本控制系统，由Linux创始人Linus在2005年开发，用于对抗商业版的版本控制工具BitKeeper，
      
    
    </summary>
    
      <category term="SCM" scheme="http://Crystalqt.github.io/categories/SCM/"/>
    
    
      <category term="git" scheme="http://Crystalqt.github.io/tags/git/"/>
    
      <category term="repo" scheme="http://Crystalqt.github.io/tags/repo/"/>
    
  </entry>
  
  <entry>
    <title>Markdown中对图片进行居中,设置大小等操作</title>
    <link href="http://Crystalqt.github.io/2018/01/24/Markdown%E4%B8%AD%E5%AF%B9%E5%9B%BE%E7%89%87%E8%BF%9B%E8%A1%8C%E5%B1%85%E4%B8%AD-%E8%AE%BE%E7%BD%AE%E5%A4%A7%E5%B0%8F%E7%AD%89%E6%93%8D%E4%BD%9C/"/>
    <id>http://Crystalqt.github.io/2018/01/24/Markdown中对图片进行居中-设置大小等操作/</id>
    <published>2018-01-24T04:17:15.000Z</published>
    <updated>2018-01-24T05:52:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设置图片居中"><a href="#设置图片居中" class="headerlink" title="设置图片居中"></a>设置图片居中</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div align=center&gt;</span><br><span class="line">![]()</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h1 id="设置图片大小"><a href="#设置图片大小" class="headerlink" title="设置图片大小"></a>设置图片大小</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=<span class="string">"/Users/soindy/Desktop/app-components-short-look_2x.png"</span> width=<span class="string">"100"</span> height=<span class="string">"100"</span> /&gt;</span><br></pre></td></tr></table></figure><p>如果使用七牛的图床.比如说按比例缩小50%:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url + ?imageMogr2/thumbnail/!50p</span><br></pre></td></tr></table></figure></p><p><a href="https://developer.qiniu.com/dora/manual/1270/the-advanced-treatment-of-images-imagemogr2" target="_blank" rel="noopener">七牛API</a></p><h1 id="参照文章"><a href="#参照文章" class="headerlink" title="参照文章"></a>参照文章</h1><p><a href="http://bestwing.me/2017/03/26/markdown图片设置方法/" target="_blank" rel="noopener">Markdown中对图片进行居中,设置大小等操作</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;设置图片居中&quot;&gt;&lt;a href=&quot;#设置图片居中&quot; class=&quot;headerlink&quot; title=&quot;设置图片居中&quot;&gt;&lt;/a&gt;设置图片居中&lt;/h1&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt
      
    
    </summary>
    
      <category term="HEXO" scheme="http://Crystalqt.github.io/categories/HEXO/"/>
    
    
      <category term="Hexo" scheme="http://Crystalqt.github.io/tags/Hexo/"/>
    
      <category term="Markdown" scheme="http://Crystalqt.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>史上最全的Vim命令</title>
    <link href="http://Crystalqt.github.io/2018/01/24/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8%E7%9A%84Vim%E5%91%BD%E4%BB%A4/"/>
    <id>http://Crystalqt.github.io/2018/01/24/史上最全的Vim命令/</id>
    <published>2018-01-24T02:44:32.000Z</published>
    <updated>2018-01-24T02:54:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>曾经使用了两年多的Vim，手册也翻过一遍。虽然现在不怎么用vim了，曾经的笔记还是贴出来，与喜欢vim的朋友分享。</p><h1 id="1-关于Vim"><a href="#1-关于Vim" class="headerlink" title="1. 关于Vim"></a>1. 关于Vim</h1><p>vim是我最喜欢的编辑器，也是linux下第二强大的编辑器。 虽然emacs是公认的世界第一，我认为使用emacs并没有使用vi进行编辑来得高效。 如果是初学vi，运行一下vimtutor是个聪明的决定。 （如果你的系统环境不是中文，而你想使用中文的vimtutor，就运行vimtutor zh）</p><h2 id="1-1-Vim的几种模式"><a href="#1-1-Vim的几种模式" class="headerlink" title="1.1 Vim的几种模式"></a>1.1 Vim的几种模式</h2><p>•    正常模式：可以使用快捷键命令，或按:输入命令行。<br>•    插入模式：可以输入文本，在正常模式下，按i、a、o等都可以进入插入模式。<br>•    可视模式：正常模式下按v可以进入可视模式， 在可视模式下，移动光标可以选择文本。按V进入可视行模式， 总是整行整行的选中。ctrl+v进入可视块模式。<br>•    替换模式：正常模式下，按R进入。</p><h1 id="2-启动Vim"><a href="#2-启动Vim" class="headerlink" title="2. 启动Vim"></a>2. 启动Vim</h1><p>•    vim -c cmd file: 在打开文件前，先执行指定的命令；<br>•    vim -r file: 恢复上次异常退出的文件；<br>•    vim -R file: 以只读的方式打开文件，但可以强制保存；<br>•    vim -M file: 以只读的方式打开文件，不可以强制保存；<br>•    vim -y num file: 将编辑窗口的大小设为num行；<br>•    vim + file: 从文件的末尾开始；<br>•    vim +num file: 从第num行开始；<br>•    vim +/string file: 打开file，并将光标停留在第一个找到的string上。<br>•    vim –remote file: 用已有的vim进程打开指定的文件。 如果你不想启用多个vim会话，这个很有用。但要注意， 如果你用vim，会寻找名叫VIM的服务器；如果你已经有一个gvim在运行了， 你可以用gvim –remote file在已有的gvim中打开文件。</p><h1 id="3-文档操作"><a href="#3-文档操作" class="headerlink" title="3. 文档操作"></a>3. 文档操作</h1><p>•    :e file –关闭当前编辑的文件，并开启新的文件。 如果对当前文件的修改未保存，vi会警告。<br>•    :e! file –放弃对当前文件的修改，编辑新的文件。<br>•    :e+file – 开始新的文件，并从文件尾开始编辑。<br>•    :e+n file – 开始新的文件，并从第n行开始编辑。<br>•    :enew –编译一个未命名的新文档。(CTRL-W n)<br>•    :e – 重新加载当前文档。<br>•    :e! – 重新加载当前文档，并丢弃已做的改动。<br>•    :e#或ctrl+^ – 回到刚才编辑的文件，很实用。<br>•    :f或ctrl+g – 显示文档名，是否修改，和光标位置。<br>•    :f filename – 改变编辑的文件名，这时再保存相当于另存为。<br>•    gf – 打开以光标所在字符串为文件名的文件。<br>•    :w – 保存修改。<br>•    :n1,n2w filename – 选择性保存从某n1行到另n2行的内容。<br>•    :wq – 保存并退出。<br>•    ZZ – 保存并退出。<br>•    :x – 保存并退出。<br>•    :q[uit] ——退出当前窗口。(CTRL-W q或CTRL-W CTRL-Q)<br>•    :saveas newfilename – 另存为<br>•    :browse e – 会打开一个文件浏览器让你选择要编辑的文件。 如果是终端中，则会打开netrw的文件浏览窗口； 如果是gvim，则会打开一个图形界面的浏览窗口。 实际上:browse后可以跟任何编辑文档的命令，如sp等。 用browse打开的起始目录可以由browsedir来设置：<br>•    :set browsedir=last – 用上次访问过的目录（默认）；<br>•    :set browsedir=buffer – 用当前文件所在目录；<br>•    :set browsedir=current – 用当前工作目录；<br>•    :Sex – 水平分割一个窗口，浏览文件系统；<br>•    :Vex – 垂直分割一个窗口，浏览文件系统；</p><h1 id="4-光标的移动"><a href="#4-光标的移动" class="headerlink" title="4. 光标的移动"></a>4. 光标的移动</h1><h2 id="4-1-基本移动"><a href="#4-1-基本移动" class="headerlink" title="4.1 基本移动"></a>4.1 基本移动</h2><p>以下移动都是在normal模式下。<br>•    h或退格: 左移一个字符；<br>•    l或空格: 右移一个字符；<br>•    j: 下移一行；<br>•    k: 上移一行；<br>•    gj: 移动到一段内的下一行；<br>•    gk: 移动到一段内的上一行；<br>•    +或Enter: 把光标移至下一行第一个非空白字符。<br>•    -: 把光标移至上一行第一个非空白字符。<br>•    w: 前移一个单词，光标停在下一个单词开头；<br>•    W: 移动下一个单词开头，但忽略一些标点；<br>•    e: 前移一个单词，光标停在下一个单词末尾；<br>•    E: 移动到下一个单词末尾，如果词尾有标点，则移动到标点；<br>•    b: 后移一个单词，光标停在上一个单词开头；<br>•    B: 移动到上一个单词开头，忽略一些标点；<br>•    ge: 后移一个单词，光标停在上一个单词末尾；<br>•    gE: 同 ge ，不过‘单词’包含单词相邻的标点。<br>•    (: 前移1句。<br>•    ): 后移1句。<br>•    {: 前移1段。<br>•    }: 后移1段。<br>•    fc: 把光标移到同一行的下一个c字符处<br>•    Fc: 把光标移到同一行的上一个c字符处<br>•    tc: 把光标移到同一行的下一个c字符前<br>•    Tc: 把光标移到同一行的上一个c字符后<br>•    ;: 配合f &amp; t使用，重复一次<br>•    ,: 配合f &amp; t使用，反向重复一次<br>上面的操作都可以配合n使用，比如在正常模式(下面会讲到)下输入3h， 则光标向左移动3个字符。<br>•    0: 移动到行首。<br>•    g0: 移到光标所在屏幕行行首。<br>•    ^: 移动到本行第一个非空白字符。<br>•    g^: 同 ^ ，但是移动到当前屏幕行第一个非空字符处。<br>•    $: 移动到行尾。<br>•    g$: 移动光标所在屏幕行行尾。<br>•    n|: 把光标移到递n列上。<br>•    nG: 到文件第n行。<br>•    :n<cr> 移动到第n行。<br>•    :$<cr> 移动到最后一行。<br>•    H: 把光标移到屏幕最顶端一行。<br>•    M: 把光标移到屏幕中间一行。<br>•    L: 把光标移到屏幕最底端一行。<br>•    gg: 到文件头部。<br>•    G: 到文件尾部。</cr></cr></p><h2 id="4-2-翻屏"><a href="#4-2-翻屏" class="headerlink" title="4.2 翻屏"></a>4.2 翻屏</h2><p>•    ctrl+f: 下翻一屏。<br>•    ctrl+b: 上翻一屏。<br>•    ctrl+d: 下翻半屏。<br>•    ctrl+u: 上翻半屏。<br>•    ctrl+e: 向下滚动一行。<br>•    ctrl+y: 向上滚动一行。<br>•    n%: 到文件n%的位置。<br>•    zz: 将当前行移动到屏幕中央。<br>•    zt: 将当前行移动到屏幕顶端。<br>•    zb: 将当前行移动到屏幕底端。</p><h2 id="4-3-标记"><a href="#4-3-标记" class="headerlink" title="4.3 标记"></a>4.3 标记</h2><p>使用标记可以快速移动。到达标记后，可以用Ctrl+o返回原来的位置。 Ctrl+o和Ctrl+i 很像浏览器上的 后退 和 前进 。<br>•    m{a-z}: 标记光标所在位置，局部标记，只用于当前文件。<br>•    m{A-Z}: 标记光标所在位置，全局标记。标记之后，退出Vim， 重新启动，标记仍然有效。<br>•    <code>{a-z}: 移动到标记位置。•    &#39;{a-z}: 移动到标记行的行首。•</code>{0-9}：回到上[2-10]次关闭vim时最后离开的位置。<br>•    <code>: 移动到上次编辑的位置。&#39;&#39;也可以，不过</code>精确到列，而’’精确到行 。如果想跳转到更老的位置，可以按C-o，跳转到更新的位置用C-i。<br>•    <code>&quot;: 移动到上次离开的地方。•</code>.: 移动到最后改动的地方。<br>•    :marks 显示所有标记。<br>•    :delmarks a b – 删除标记a和b。<br>•    :delmarks a-c – 删除标记a、b和c。<br>•    :delmarks a c-f – 删除标记a、c、d、e、f。<br>•    :delmarks! – 删除当前缓冲区的所有标记。<br>•    :help mark-motions 查看更多关于mark的知识。</p><h1 id="5-插入文本"><a href="#5-插入文本" class="headerlink" title="5. 插入文本"></a>5. 插入文本</h1><h2 id="5-1-基本插入"><a href="#5-1-基本插入" class="headerlink" title="5.1 基本插入"></a>5.1 基本插入</h2><p>•    i: 在光标前插入；一个小技巧：按8，再按i，进入插入模式，输入=， 按esc进入命令模式，就会出现8个=。 这在插入分割线时非常有用，如30i+<esc>就插入了36个+组成的分割线。<br>•    I: 在当前行第一个非空字符前插入；<br>•    gI: 在当前行第一列插入；<br>•    a: 在光标后插入；<br>•    A: 在当前行最后插入；<br>•    o: 在下面新建一行插入；<br>•    O: 在上面新建一行插入；<br>•    :r filename在当前位置插入另一个文件的内容。<br>•    :[n]r filename在第n行插入另一个文件的内容。<br>•    :r !date 在光标处插入当前日期与时间。同理，:r !command可以将其它shell命令的输出插入当前文档。</esc></p><h2 id="5-2-改写插入"><a href="#5-2-改写插入" class="headerlink" title="5.2 改写插入"></a>5.2 改写插入</h2><p>•    c[n]w: 改写光标后1(n)个词。<br>•    c[n]l: 改写光标后n个字母。<br>•    c[n]h: 改写光标前n个字母。<br>•    [n]cc: 修改当前[n]行。<br>•    [n]s: 以输入的文本替代光标之后1(n)个字符，相当于c[n]l。<br>•    [n]S: 删除指定数目的行，并以所输入文本代替之。<br>注意，类似cnw,dnw,ynw的形式同样可以写为ncw,ndw,nyw。</p><h1 id="6-剪切复制和寄存器"><a href="#6-剪切复制和寄存器" class="headerlink" title="6. 剪切复制和寄存器"></a>6. 剪切复制和寄存器</h1><h2 id="6-1-剪切和复制、粘贴"><a href="#6-1-剪切和复制、粘贴" class="headerlink" title="6.1 剪切和复制、粘贴"></a>6.1 剪切和复制、粘贴</h2><p>•    [n]x: 剪切光标右边n个字符，相当于d[n]l。<br>•    [n]X: 剪切光标左边n个字符，相当于d[n]h。<br>•    y: 复制在可视模式下选中的文本。<br>•    yy or Y: 复制整行文本。<br>•    y[n]w: 复制一(n)个词。<br>•    y[n]l: 复制光标右边1(n)个字符。<br>•    y[n]h: 复制光标左边1(n)个字符。<br>•    y$: 从光标当前位置复制到行尾。<br>•    y0: 从光标当前位置复制到行首。<br>•    :m,ny<cr> 复制m行到n行的内容。<br>•    y1G或ygg: 复制光标以上的所有行。<br>•    yG: 复制光标以下的所有行。<br>•    yaw和yas：复制一个词和复制一个句子，即使光标不在词首和句首也没关系。<br>•    d: 删除（剪切）在可视模式下选中的文本。<br>•    d$ or D: 删除（剪切）当前位置到行尾的内容。<br>•    d[n]w: 删除（剪切）1(n)个单词<br>•    d[n]l: 删除（剪切）光标右边1(n)个字符。<br>•    d[n]h: 删除（剪切）光标左边1(n)个字符。<br>•    d0: 删除（剪切）当前位置到行首的内容<br>•    [n] dd: 删除（剪切）1(n)行。<br>•    :m,nd<cr> 剪切m行到n行的内容。<br>•    d1G或dgg: 剪切光标以上的所有行。<br>•    dG: 剪切光标以下的所有行。<br>•    daw和das：剪切一个词和剪切一个句子，即使光标不在词首和句首也没关系。<br>•    d/f<cr>：这是一个比较高级的组合命令，它将删除当前位置 到下一个f之间的内容。<br>•    p: 在光标之后粘贴。<br>•    P: 在光标之前粘贴。</cr></cr></cr></p><h2 id="6-2-文本对象"><a href="#6-2-文本对象" class="headerlink" title="6.2 文本对象"></a>6.2 文本对象</h2><p>•    aw：一个词<br>•    as：一句。<br>•    ap：一段。<br>•    ab：一块（包含在圆括号中的）。<br>y, d, c, v都可以跟文本对象。</p><h2 id="6-3-寄存器"><a href="#6-3-寄存器" class="headerlink" title="6.3 寄存器"></a>6.3 寄存器</h2><p>•    a-z：都可以用作寄存器名。”ayy把当前行的内容放入a寄存器。<br>•    A-Z：用大写字母索引寄存器，可以在寄存器中追加内容。 如”Ayy把当前行的内容追加到a寄存器中。<br>•    :reg 显示所有寄存器的内容。<br>•    “”：不加寄存器索引时，默认使用的寄存器。<br>•    “<em>：当前选择缓冲区，”</em>yy把当前行的内容放入当前选择缓冲区。<br>•    “+：系统剪贴板。”+yy把当前行的内容放入系统剪贴板。</p><h1 id="7-查找与替换"><a href="#7-查找与替换" class="headerlink" title="7. 查找与替换"></a>7. 查找与替换</h1><h2 id="7-1-查找"><a href="#7-1-查找" class="headerlink" title="7.1 查找"></a>7.1 查找</h2><p>•    /something: 在后面的文本中查找something。<br>•    ?something: 在前面的文本中查找something。<br>•    /pattern/+number: 将光标停在包含pattern的行后面第number行上。<br>•    /pattern/-number: 将光标停在包含pattern的行前面第number行上。<br>•    n: 向后查找下一个。<br>•    N: 向前查找下一个。<br>可以用grep或vimgrep查找一个模式都在哪些地方出现过，<br>其中:grep是调用外部的grep程序，而:vimgrep是vim自己的查找算法。<br>用法为： :vim[grep]/pattern/[g] [j] files<br>g的含义是如果一个模式在一行中多次出现，则这一行也在结果中多次出现。<br>j的含义是grep结束后，结果停在第j项，默认是停在第一项。<br>vimgrep前面可以加数字限定搜索结果的上限，如<br>:1vim/pattern/ % 只查找那个模式在本文件中的第一个出现。</p><p>其实vimgrep在读纯文本电子书时特别有用，可以生成导航的目录。<br>比如电子书中每一节的标题形式为：n. xxxx。你就可以这样：<br>:vim/^d{1,}./ %<br>然后用:cw或:copen查看结果，可以用C-w H把quickfix窗口移到左侧，<br>就更像个目录了。</p><h2 id="7-2-替换"><a href="#7-2-替换" class="headerlink" title="7.2 替换"></a>7.2 替换</h2><p>•    :s/old/new - 用new替换当前行第一个old。<br>•    :s/old/new/g - 用new替换当前行所有的old。<br>•    :n1,n2s/old/new/g - 用new替换文件n1行到n2行所有的old。<br>•    :%s/old/new/g - 用new替换文件中所有的old。<br>•    :%s/^/xxx/g - 在每一行的行首插入xxx，^表示行首。<br>•    :%s/$/xxx/g - 在每一行的行尾插入xxx，$表示行尾。<br>•    所有替换命令末尾加上c，每个替换都将需要用户确认。 如：%s/old/new/gc，加上i则忽略大小写(ignore)。<br>还有一种比替换更灵活的方式，它是匹配到某个模式后执行某种命令，<br>语法为 :[range]g/pattern/command<br>例如 :%g/^ xyz/normal dd。<br>表示对于以一个空格和xyz开头的行执行normal模式下的dd命令。<br>关于range的规定为：<br>•    如果不指定range，则表示当前行。<br>•    m,n: 从m行到n行。<br>•    0: 最开始一行（可能是这样）。<br>•    $: 最后一行<br>•    .: 当前行<br>•    %: 所有行</p><h2 id="7-3-正则表达式"><a href="#7-3-正则表达式" class="headerlink" title="7.3 正则表达式"></a>7.3 正则表达式</h2><p>高级的查找替换就要用到正则表达式。<br>•    \d: 表示十进制数（我猜的）<br>•    \s: 表示空格<br>•    \S: 非空字符<br>•    \a: 英文字母<br>•    |: 表示 或<br>•    .: 表示.<br>•    {m,n}: 表示m到n个字符。这要和 \s与\a等连用，如 \a{m,n} 表示m 到n个英文字母。<br>•    {m,}: 表示m到无限多个字符。<br>•    **: 当前目录下的所有子目录。<br>:help pattern得到更多帮助。</p><h1 id="8-排版"><a href="#8-排版" class="headerlink" title="8. 排版"></a>8. 排版</h1><h2 id="8-1-基本排版"><a href="#8-1-基本排版" class="headerlink" title="8.1 基本排版"></a>8.1 基本排版</h2><p>•    &lt;&lt; 向左缩进一个shiftwidth<br>•    &gt;&gt; 向右缩进一个shiftwidth<br>•    :ce(nter) 本行文字居中<br>•    :le(ft) 本行文字靠左<br>•    :ri(ght) 本行文字靠右<br>•    gq 对选中的文字重排，即对过长的文字进行断行<br>•    gqq 重排当前行<br>•    gqnq 重排n行<br>•    gqap 重排当前段<br>•    gqnap 重排n段<br>•    gqnj 重排当前行和下面n行<br>•    gqQ 重排当前段对文章末尾<br>•    J 拼接当前行和下一行<br>•    gJ 同 J ，不过合并后不留空格。</p><h2 id="8-2-拼写检查"><a href="#8-2-拼写检查" class="headerlink" title="8.2 拼写检查"></a>8.2 拼写检查</h2><p>•    :set spell－开启拼写检查功能<br>•    :set nospell－关闭拼写检查功能<br>•    ]s－移到下一个拼写错误的单词<br>•    [s－作用与上一命令类似，但它是从相反方向进行搜索<br>•    z=－显示一个有关拼写错误单词的列表，可从中选择<br>•    zg－告诉拼写检查器该单词是拼写正确的<br>•    zw－与上一命令相反，告诉拼写检查器该单词是拼写错误的</p><h2 id="8-3-统计字数"><a href="#8-3-统计字数" class="headerlink" title="8.3 统计字数"></a>8.3 统计字数</h2><p>g ^g可以统计文档字符数，行数。 将光标放在最后一个字符上，用字符数减去行数可以粗略统计中文文档的字数。 以上对 Mac 或 Unix 的文件格式适用。 如果是 Windows 文件格式（即换行符有两个字节），字数的统计方法为： 字符数 - 行数 * 2。</p><h1 id="9-编辑多个文件"><a href="#9-编辑多个文件" class="headerlink" title="9. 编辑多个文件"></a>9. 编辑多个文件</h1><h2 id="9-1-一次编辑多个文件"><a href="#9-1-一次编辑多个文件" class="headerlink" title="9.1 一次编辑多个文件"></a>9.1 一次编辑多个文件</h2><p>我们可以一次打开多个文件，如<br>vi a.txt b.txt c.txt<br>•    使用:next(:n)编辑下一个文件。<br>•    :2n 编辑下2个文件。<br>•    使用:previous或:N编辑上一个文件。<br>•    使用:wnext，保存当前文件，并编辑下一个文件。<br>•    使用:wprevious，保存当前文件，并编辑上一个文件。<br>•    使用:args 显示文件列表。<br>•    :n filenames或:args filenames 指定新的文件列表。<br>•    vi -o filenames 在水平分割的多个窗口中编辑多个文件。<br>•    vi -O filenames 在垂直分割的多个窗口中编辑多个文件。</p><h2 id="9-2-多标签编辑"><a href="#9-2-多标签编辑" class="headerlink" title="9.2 多标签编辑"></a>9.2 多标签编辑</h2><p>•    vim -p files: 打开多个文件，每个文件占用一个标签页。<br>•    :tabe, tabnew – 如果加文件名，就在新的标签中打开这个文件， 否则打开一个空缓冲区。<br>•    ^w gf – 在新的标签页里打开光标下路径指定的文件。<br>•    :tabn – 切换到下一个标签。Control + PageDown，也可以。<br>•    :tabp – 切换到上一个标签。Control + PageUp，也可以。<br>•    [n] gt – 切换到下一个标签。如果前面加了 n ， 就切换到第n个标签。第一个标签的序号就是1。<br>•    :tab split – 将当前缓冲区的内容在新页签中打开。<br>•    :tabc[lose] – 关闭当前的标签页。<br>•    :tabo[nly] – 关闭其它的标签页。<br>•    :tabs – 列出所有的标签页和它们包含的窗口。<br>•    :tabm[ove] [N] – 移动标签页，移动到第N个标签页之后。 如 tabm 0 当前标签页，就会变成第一个标签页。</p><h2 id="9-3-缓冲区"><a href="#9-3-缓冲区" class="headerlink" title="9.3 缓冲区"></a>9.3 缓冲区</h2><p>•    :buffers或:ls或:files 显示缓冲区列表。<br>•    ctrl+^：在最近两个缓冲区间切换。<br>•    :bn – 下一个缓冲区。<br>•    :bp – 上一个缓冲区。<br>•    :bl – 最后一个缓冲区。<br>•    :b[n]或:[n]b – 切换到第n个缓冲区。<br>•    :nbw(ipeout) – 彻底删除第n个缓冲区。<br>•    :nbd(elete) – 删除第n个缓冲区，并未真正删除，还在unlisted列表中。<br>•    :ba[ll] – 把所有的缓冲区在当前页中打开，每个缓冲区占一个窗口。</p><h1 id="10-分屏编辑"><a href="#10-分屏编辑" class="headerlink" title="10. 分屏编辑"></a>10. 分屏编辑</h1><p>•    vim -o file1 file2:水平分割窗口，同时打开file1和file2<br>•    vim -O file1 file2:垂直分割窗口，同时打开file1和file2</p><h2 id="10-1-水平分割"><a href="#10-1-水平分割" class="headerlink" title="10.1 水平分割"></a>10.1 水平分割</h2><p>•    :split(:sp) – 把当前窗水平分割成两个窗口。(CTRL-W s 或 CTRL-W CTRL-S) 注意如果在终端下，CTRL-S可能会冻结终端，请按CTRL-Q继续。<br>•    :split filename – 水平分割窗口，并在新窗口中显示另一个文件。<br>•    :nsplit(:nsp) – 水平分割出一个n行高的窗口。<br>•    :[N]new – 水平分割出一个N行高的窗口，并编辑一个新文件。 (CTRL-W n或 CTRL-W CTRL-N)<br>•    ctrl+w f –水平分割出一个窗口，并在新窗口打开名称为光标所在词的文件 。<br>•    C-w C-^ – 水平分割一个窗口，打开刚才编辑的文件。</p><h2 id="10-2-垂直分割"><a href="#10-2-垂直分割" class="headerlink" title="10.2 垂直分割"></a>10.2 垂直分割</h2><p>•    :vsplit(:vsp) – 把当前窗口分割成水平分布的两个窗口。 (CTRL-W v或CTRL CTRL-V)<br>•    :[N]vne[w] – 垂直分割出一个新窗口。<br>•    :vertical 水平分割的命令： 相应的垂直分割。</p><h2 id="10-3-关闭子窗口"><a href="#10-3-关闭子窗口" class="headerlink" title="10.3 关闭子窗口"></a>10.3 关闭子窗口</h2><p>•    :qall – 关闭所有窗口，退出vim。<br>•    :wall – 保存所有修改过的窗口。<br>•    :only – 只保留当前窗口，关闭其它窗口。(CTRL-W o)<br>•    :close – 关闭当前窗口，CTRL-W c能实现同样的功能。 (象 :q :x同样工作 )</p><h2 id="10-4-调整窗口大小"><a href="#10-4-调整窗口大小" class="headerlink" title="10.4 调整窗口大小"></a>10.4 调整窗口大小</h2><p>•    ctrl+w + –当前窗口增高一行。也可以用n增高n行。<br>•    ctrl+w - –当前窗口减小一行。也可以用n减小n行。<br>•    ctrl+w <em> –当前窗口扩展到尽可能的大。也可以用n设定行数。<br>•    :resize n – 当前窗口n行高。<br>•    ctrl+w = – 所有窗口同样高度。<br>•    n ctrl+w </em> – 当前窗口的高度设定为n行。<br>•    ctrl+w &lt; –当前窗口减少一列。也可以用n减少n列。<br>•    ctrl+w &gt; –当前窗口增宽一列。也可以用n增宽n列。<br>•    ctrl+w | –当前窗口尽可能的宽。也可以用n设定列数。</p><h2 id="10-5-切换和移动窗口"><a href="#10-5-切换和移动窗口" class="headerlink" title="10.5 切换和移动窗口"></a>10.5 切换和移动窗口</h2><p>如果支持鼠标，切换和调整子窗口的大小就简单了。<br>•    ctrl+w ctrl+w: 切换到下一个窗口。或者是ctrl+w w。<br>•    ctrl+w p: 切换到前一个窗口。<br>•    ctrl+w h(l,j,k):切换到左（右，下，上）的窗口。<br>•    ctrl+w t(b):切换到最上（下）面的窗口。<br><br>•    ctrl+w H(L,K,J): 将当前窗口移动到最左（右、上、下）面。<br>•    ctrl+w r：旋转窗口的位置。<br>•    ctrl+w T: 将当前的窗口移动到新的标签页上。</p><h1 id="11-快速编辑"><a href="#11-快速编辑" class="headerlink" title="11. 快速编辑"></a>11. 快速编辑</h1><h2 id="11-1-改变大小写"><a href="#11-1-改变大小写" class="headerlink" title="11.1 改变大小写"></a>11.1 改变大小写</h2><p>•    ~: 反转光标所在字符的大小写。<br>•    可视模式下的U或u：把选中的文本变为大写或小写。<br>•    gu(U)接范围（如$，或G），可以把从光标当前位置到指定位置之间字母全部 转换成小写或大写。如ggguG，就是把开头到最后一行之间的字母全部变为小 写。再如gu5j，把当前行和下面四行全部变成小写。</p><h2 id="11-2-替换（normal模式）"><a href="#11-2-替换（normal模式）" class="headerlink" title="11.2 替换（normal模式）"></a>11.2 替换（normal模式）</h2><p>•    r: 替换光标处的字符，同样支持汉字。<br>•    R: 进入替换模式，按esc回到正常模式。</p><h2 id="11-3-撤消与重做（normal模式）"><a href="#11-3-撤消与重做（normal模式）" class="headerlink" title="11.3 撤消与重做（normal模式）"></a>11.3 撤消与重做（normal模式）</h2><p>•    [n] u: 取消一(n)个改动。<br>•    :undo 5 – 撤销5个改变。<br>•    :undolist – 你的撤销历史。<br>•    ctrl + r: 重做最后的改动。<br>•    U: 取消当前行中所有的改动。<br>•    :earlier 4m – 回到4分钟前<br>•    :later 55s – 前进55秒</p><h2 id="11-4-宏"><a href="#11-4-宏" class="headerlink" title="11.4 宏"></a>11.4 宏</h2><p>•    . –重复上一个编辑动作<br>•    qa：开始录制宏a（键盘操作记录）<br>•    q：停止录制<br>•    @a：播放宏a</p><h1 id="12-编辑特殊文件"><a href="#12-编辑特殊文件" class="headerlink" title="12. 编辑特殊文件"></a>12. 编辑特殊文件</h1><h2 id="12-1-文件加解密"><a href="#12-1-文件加解密" class="headerlink" title="12.1 文件加解密"></a>12.1 文件加解密</h2><p>•    vim -x file: 开始编辑一个加密的文件。<br>•    :X – 为当前文件设置密码。<br>•    :set key= – 去除文件的密码。<br>这里是 滇狐总结的比较高级的vi技巧。</p><h2 id="12-2-文件的编码"><a href="#12-2-文件的编码" class="headerlink" title="12.2 文件的编码"></a>12.2 文件的编码</h2><p>•    :e ++enc=utf8 filename, 让vim用utf-8的编码打开这个文件。<br>•    :w ++enc=gbk，不管当前文件什么编码，把它转存成gbk编码。<br>•    :set fenc或:set fileencoding，查看当前文件的编码。<br>•    在vimrc中添加set fileencoding=ucs-bom,utf-8,cp936，vim会根据要打开的文件选择合适的编码。 注意：编码之间不要留空格。 cp936对应于gbk编码。 ucs-bom对应于windows下的文件格式。<br>让vim 正确处理文件格式和文件编码，有赖于 ~/.vimrc的正确配置</p><h2 id="12-3-文件格式"><a href="#12-3-文件格式" class="headerlink" title="12.3 文件格式"></a>12.3 文件格式</h2><p>大致有三种文件格式：unix, dos, mac. 三种格式的区别主要在于回车键的编码：dos 下是回车加换行，unix 下只有 换行符，mac 下只有回车符。<br>•    :e ++ff=dos filename, 让vim用dos格式打开这个文件。<br>•    :w ++ff=mac filename, 以mac格式存储这个文件。<br>•    :set ff，显示当前文件的格式。<br>•    在vimrc中添加set fileformats=unix,dos,mac，让vim自动识别文件格式。</p><h1 id="13-编程辅助"><a href="#13-编程辅助" class="headerlink" title="13. 编程辅助"></a>13. 编程辅助</h1><h2 id="13-1-一些按键"><a href="#13-1-一些按键" class="headerlink" title="13.1 一些按键"></a>13.1 一些按键</h2><p>•    gd: 跳转到局部变量的定义处；<br>•    gD: 跳转到全局变量的定义处，从当前文件开头开始搜索；<br>•    g;: 上一个修改过的地方；<br>•    g,: 下一个修改过的地方；<br>•    [[: 跳转到上一个函数块开始，需要有单独一行的{。<br>•    ]]: 跳转到下一个函数块开始，需要有单独一行的{。<br>•    []: 跳转到上一个函数块结束，需要有单独一行的}。<br>•    ][: 跳转到下一个函数块结束，需要有单独一行的}。<br>•    [{: 跳转到当前块开始处；<br>•    ]}: 跳转到当前块结束处；<br>•    [/: 跳转到当前注释块开始处；<br>•    ]/: 跳转到当前注释块结束处；<br>•    %: 不仅能移动到匹配的(),{}或[]上，而且能在#if，#else， #endif之间跳跃。<br>下面的括号匹配对编程很实用的。<br>•    ci’, di’, yi’：修改、剪切或复制’之间的内容。<br>•    ca’, da’, ya’：修改、剪切或复制’之间的内容，包含’。<br>•    ci”, di”, yi”：修改、剪切或复制”之间的内容。<br>•    ca”, da”, ya”：修改、剪切或复制”之间的内容，包含”。<br>•    ci(, di(, yi(：修改、剪切或复制()之间的内容。<br>•    ca(, da(, ya(：修改、剪切或复制()之间的内容，包含()。<br>•    ci[, di[, yi[：修改、剪切或复制[]之间的内容。<br>•    ca[, da[, ya[：修改、剪切或复制[]之间的内容，包含[]。<br>•    ci{, di{, yi{：修改、剪切或复制{}之间的内容。<br>•    ca{, da{, ya{：修改、剪切或复制{}之间的内容，包含{}。<br>•    ci&lt;, di&lt;, yi&lt;：修改、剪切或复制&lt;&gt;之间的内容。<br>•    ca&lt;, da&lt;, ya&lt;：修改、剪切或复制&lt;&gt;之间的内容，包含&lt;&gt;。</p><h2 id="13-2-ctags"><a href="#13-2-ctags" class="headerlink" title="13.2 ctags"></a>13.2 ctags</h2><p>•    ctags -R: 生成tag文件，-R表示也为子目录中的文件生成tags<br>•    :set tags=path/tags – 告诉ctags使用哪个tag文件<br>•    :tag xyz – 跳到xyz的定义处，或者将光标放在xyz上按C-]，返回用C-t<br>•    :stag xyz – 用分割的窗口显示xyz的定义，或者C-w ]， 如果用C-w n ]，就会打开一个n行高的窗口<br>•    :ptag xyz – 在预览窗口中打开xyz的定义，热键是C-w }。<br>•    :pclose – 关闭预览窗口。热键是C-w z。<br>•    :pedit abc.h – 在预览窗口中编辑abc.h<br>•    :psearch abc – 搜索当前文件和当前文件include的文件，显示包含abc的行。<br>有时一个tag可能有多个匹配，如函数重载，一个函数名就会有多个匹配。 这种情况会先跳转到第一个匹配处。<br>•    :[n]tnext – 下一[n]个匹配。<br>•    :[n]tprev – 上一[n]个匹配。<br>•    :tfirst – 第一个匹配<br>•    :tlast – 最后一个匹配<br>•    :tselect tagname – 打开选择列表<br>tab键补齐<br>•    :tag xyz<tab> – 补齐以xyz开头的tag名，继续按tab键，会显示其他的。<br>•    :tag /xyz<tab> – 会用名字中含有xyz的tag名补全。</tab></tab></p><h2 id="13-3-cscope"><a href="#13-3-cscope" class="headerlink" title="13.3 cscope"></a>13.3 cscope</h2><p>•    cscope -Rbq: 生成cscope.out文件<br>•    :cs add /path/to/cscope.out /your/work/dir<br>•    :cs find c func – 查找func在哪些地方被调用<br>•    :cw – 打开quickfix窗口查看结果</p><h2 id="13-4-gtags"><a href="#13-4-gtags" class="headerlink" title="13.4 gtags"></a>13.4 gtags</h2><p>Gtags综合了ctags和cscope的功能。 使用Gtags之前，你需要安装GNU Gtags。 然后在工程目录运行 gtags 。<br>•    :Gtags funcname 定位到 funcname 的定义处。<br>•    :Gtags -r funcname 查询 funcname被引用的地方。<br>•    :Gtags -s symbol 定位 symbol 出现的地方。<br>•    :Gtags -g string Goto string 出现的地方。 :Gtags -gi string 忽略大小写。<br>•    :Gtags -f filename 显示 filename 中的函数列表。 你可以用 :Gtags -f % 显示当前文件。<br>•    :Gtags -P pattern 显示路径中包含特定模式的文件。 如 :Gtags -P .h$ 显示所有头文件， :Gtags -P /vm/ 显示vm目录下的文件。</p><h2 id="13-5-编译"><a href="#13-5-编译" class="headerlink" title="13.5 编译"></a>13.5 编译</h2><p>vim提供了:make来编译程序，默认调用的是make， 如果你当前目录下有makefile，简单地:make即可。<br>如果你没有make程序，你可以通过配置makeprg选项来更改make调用的程序。 如果你只有一个abc.java文件，你可以这样设置：<br>set makeprg=javac\ abc.java<br>然后:make即可。如果程序有错，可以通过quickfix窗口查看错误。 不过如果要正确定位错误，需要设置好errorformat，让vim识别错误信息。 如：<br>:setl efm=%A%f:%l:\ %m,%-Z%p^,%-C%.%#<br>%f表示文件名，%l表示行号， %m表示错误信息，其它的还不能理解。 请参考 :help errorformat。</p><h2 id="13-6-快速修改窗口"><a href="#13-6-快速修改窗口" class="headerlink" title="13.6 快速修改窗口"></a>13.6 快速修改窗口</h2><p>其实是quickfix插件提供的功能， 对编译调试程序非常有用 :)<br>•    :copen – 打开快速修改窗口。<br>•    :cclose – 关闭快速修改窗口。<br>快速修改窗口在make程序时非常有用，当make之后：<br>•    :cl – 在快速修改窗口中列出错误。<br>•    :cn – 定位到下一个错误。<br>•    :cp – 定位到上一个错误。<br>•    :cr – 定位到第一个错误。</p><h2 id="13-7-自动补全"><a href="#13-7-自动补全" class="headerlink" title="13.7 自动补全"></a>13.7 自动补全</h2><p>•    C-x C-s – 拼写建议。<br>•    C-x C-v – 补全vim选项和命令。<br>•    C-x C-l – 整行补全。<br>•    C-x C-f – 自动补全文件路径。弹出菜单后，按C-f循环选择，当然也可以按 C-n和C-p。<br>•    C-x C-p 和C-x C-n – 用文档中出现过的单词补全当前的词。 直接按C-p和C-n也可以。<br>•    C-x C-o – 编程时可以补全关键字和函数名啊。<br>•    C-x C-i – 根据头文件内关键字补全。<br>•    C-x C-d – 补全宏定义。<br>•    C-x C-n – 按缓冲区中出现过的关键字补全。 直接按C-n或C-p即可。<br>当弹出补全菜单后：<br>•    C-p 向前切换成员；<br>•    C-n 向后切换成员；<br>•    C-e 退出下拉菜单，并退回到原来录入的文字；<br>•    C-y 退出下拉菜单，并接受当前选项。</p><h2 id="13-8-多行缩进缩出"><a href="#13-8-多行缩进缩出" class="headerlink" title="13.8 多行缩进缩出"></a>13.8 多行缩进缩出</h2><p>•    正常模式下，按两下&gt;;光标所在行会缩进。<br>•    如果先按了n，再按两下&gt;;，光标以下的n行会缩进。<br>•    对应的，按两下&lt;;，光标所在行会缩出。<br>•    如果在编辑代码文件，可以用=进行调整。<br>•    在可视模式下，选择要调整的代码块，按=，代码会按书写规则缩排好。<br>•    或者n =，调整n行代码的缩排。</p><h2 id="13-9-折叠"><a href="#13-9-折叠" class="headerlink" title="13.9 折叠"></a>13.9 折叠</h2><p>•    zf – 创建折叠的命令，可以在一个可视区域上使用该命令；<br>•    zd – 删除当前行的折叠；<br>•    zD – 删除当前行的折叠；<br>•    zfap – 折叠光标所在的段；<br>•    zo – 打开折叠的文本；<br>•    zc – 收起折叠；<br>•    za – 打开/关闭当前折叠；<br>•    zr – 打开嵌套的折行；<br>•    zm – 收起嵌套的折行；<br>•    zR (zO) – 打开所有折行；<br>•    zM (zC) – 收起所有折行；<br>•    zj – 跳到下一个折叠处；<br>•    zk – 跳到上一个折叠处；<br>•    zi – enable/disable fold;</p><h1 id="14-命令行"><a href="#14-命令行" class="headerlink" title="14. 命令行"></a>14. 命令行</h1><p>normal模式下按:进入命令行模式</p><h2 id="14-1-命令行模式下的快捷键："><a href="#14-1-命令行模式下的快捷键：" class="headerlink" title="14.1 命令行模式下的快捷键："></a>14.1 命令行模式下的快捷键：</h2><p>•    上下方向键：上一条或者下一条命令。如果已经输入了部分命令，则找上一 条或者下一条匹配的命令。<br>•    左右方向键：左/右移一个字符。<br>•    C-w： 向前删除一个单词。<br>•    C-h： 向前删除一个字符，等同于Backspace。<br>•    C-u： 从当前位置移动到命令行开头。<br>•    C-b： 移动到命令行开头。<br>•    C-e： 移动到命令行末尾。<br>•    Shift-Left： 左移一个单词。<br>•    Shift-Right： 右移一个单词。<br>•    @： 重复上一次的冒号命令。<br>•    q： 正常模式下，q然后按’:’，打开命令行历史缓冲区， 可以像编辑文件一样编辑命令。<br>•    q/和q? 可以打开查找历史记录。</p><h2 id="14-2-执行外部命令"><a href="#14-2-执行外部命令" class="headerlink" title="14.2 执行外部命令"></a>14.2 执行外部命令</h2><p>•    :! cmd 执行外部命令。<br>•    :!! 执行上一次的外部命令。<br>•    :sh 调用shell，用exit返回vim。<br>•    :r !cmd 将命令的返回结果插入文件当前位置。<br>•    :m,nw !cmd 将文件的m行到n行之间的内容做为命令输入执行命令。</p><h1 id="15-其它"><a href="#15-其它" class="headerlink" title="15. 其它"></a>15. 其它</h1><h2 id="15-1-工作目录"><a href="#15-1-工作目录" class="headerlink" title="15.1 工作目录"></a>15.1 工作目录</h2><p>•    :pwd 显示vim的工作目录。<br>•    :cd path 改变vim的工作目录。<br>•    :set autochdir 可以让vim 根据编辑的文件自动切换工作目录。</p><h2 id="15-2-一些快捷键（收集中）"><a href="#15-2-一些快捷键（收集中）" class="headerlink" title="15.2 一些快捷键（收集中）"></a>15.2 一些快捷键（收集中）</h2><p>•    K: 打开光标所在词的manpage。<br>•    <em>: 向下搜索光标所在词。<br>•    g</em>: 同上，但部分符合即可。<br>•    #: 向上搜索光标所在词。<br>•    g#: 同上，但部分符合即可。<br>•    g C-g: 统计全文或统计部分的字数。</p><h2 id="15-3-在线帮助"><a href="#15-3-在线帮助" class="headerlink" title="15.3 在线帮助"></a>15.3 在线帮助</h2><p>•    :h(elp)或F1 打开总的帮助。<br>•    :help user-manual 打开用户手册。<br>•    命令帮助的格式为：第一行指明怎么使用那个命令； 然后是缩进的一段解释这个命令的作用，然后是进一步的信息。<br>•    :helptags somepath 为somepath中的文档生成索引。<br>•    :helpgrep 可以搜索整个帮助文档，匹配的列表显示在quickfix窗口中。<br>•    Ctrl+] 跳转到tag主题，Ctrl+t 跳回。<br>•    :ver 显示版本信息。</p><h2 id="15-4-一些小功能"><a href="#15-4-一些小功能" class="headerlink" title="15.4 一些小功能"></a>15.4 一些小功能</h2><p>简单计算器: 在插入模式下，输入C-r =，然后输入表达式，就能在 光标处得到计算结果。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;曾经使用了两年多的Vim，手册也翻过一遍。虽然现在不怎么用vim了，曾经的笔记还是贴出来，与喜欢vim的朋友分享。&lt;/p&gt;
&lt;h1 id=&quot;1-关于Vim&quot;&gt;&lt;a href=&quot;#1-关于Vim&quot; class=&quot;headerlink&quot; title=&quot;1. 关于Vim&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="SCM" scheme="http://Crystalqt.github.io/categories/SCM/"/>
    
    
      <category term="vim 命令" scheme="http://Crystalqt.github.io/tags/vim-%E5%91%BD%E4%BB%A4/"/>
    
      <category term="正则表达式" scheme="http://Crystalqt.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
      <category term="搜索" scheme="http://Crystalqt.github.io/tags/%E6%90%9C%E7%B4%A2/"/>
    
      <category term="定位" scheme="http://Crystalqt.github.io/tags/%E5%AE%9A%E4%BD%8D/"/>
    
      <category term="分屏" scheme="http://Crystalqt.github.io/tags/%E5%88%86%E5%B1%8F/"/>
    
  </entry>
  
  <entry>
    <title>这11个习惯，请逼自己养成！（第五个很多人都做不到）</title>
    <link href="http://Crystalqt.github.io/2018/01/24/%E8%BF%9911%E4%B8%AA%E4%B9%A0%E6%83%AF%EF%BC%8C%E8%AF%B7%E9%80%BC%E8%87%AA%E5%B7%B1%E5%85%BB%E6%88%90%EF%BC%81%EF%BC%88%E7%AC%AC%E4%BA%94%E4%B8%AA%E5%BE%88%E5%A4%9A%E4%BA%BA%E9%83%BD%E5%81%9A%E4%B8%8D%E5%88%B0%EF%BC%89/"/>
    <id>http://Crystalqt.github.io/2018/01/24/这11个习惯，请逼自己养成！（第五个很多人都做不到）/</id>
    <published>2018-01-24T02:16:40.000Z</published>
    <updated>2018-01-24T04:14:10.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="01"><a href="#01" class="headerlink" title="01"></a>01</h2><h2 id="不带手机上床"><a href="#不带手机上床" class="headerlink" title="不带手机上床"></a>不带手机上床</h2><p>手机对我们的诱惑力实在太大，如果带着手机上床，往往会将正常的睡觉时间推迟。另外，坐在床上玩手机对眼睛和颈椎的伤害都很大。睡觉前远离手机，上床后可以看会儿书，按时睡觉，保证足够的睡眠。</p><div align="center"><br><img src="/uploads/日出.jpg" alt="日出"><br></div><h2 id="02"><a href="#02" class="headerlink" title="02"></a>02</h2><h2 id="吃早餐"><a href="#吃早餐" class="headerlink" title="吃早餐"></a>吃早餐</h2><p>一定要吃早餐，保证足够的营养摄入！毕竟，早上起来的时候，我们的身体已经有一晚没有进食了，如果不能及时进行补充，很容易把身体拖垮。  </p><p> 一天之计在于晨，吃一顿保质保量的早餐，给自己的身体充满电。</p><h2 id="03"><a href="#03" class="headerlink" title="03"></a>03</h2><h2 id="凡事提前10分钟"><a href="#凡事提前10分钟" class="headerlink" title="凡事提前10分钟"></a>凡事提前10分钟</h2><p>做任何事，最好都给自己留点余地。</p><p>凡事提前10分钟，在遇到突发情况的时候让自己有足够的时间去处理，不会让自己总是处在一种非常急迫的状态。   </p><p>提前10分钟起床，提前10分钟出门……你会发现，一整天都变得从容很多。</p><h2 id="04"><a href="#04" class="headerlink" title="04"></a>04</h2><h2 id="事分轻重缓急"><a href="#事分轻重缓急" class="headerlink" title="事分轻重缓急"></a>事分轻重缓急</h2><p>每天开始工作前，不要急急忙忙抓到什么做什么。先静下心来理一理思路，将事情分个轻重缓急，先做紧急的、重要的，再做不急的、次要的。</p><p>当日事当日毕。这样既能保证工作高效，又能合理利用时间。</p><h2 id="05"><a href="#05" class="headerlink" title="05"></a>05</h2><h2 id="学会拒绝"><a href="#学会拒绝" class="headerlink" title="学会拒绝"></a>学会拒绝</h2><p>有一句经典台词：你每次找我帮忙我都欣然接受，如果有一次我不能帮你，你就会对我产生一种莫名奇妙的厌恶感。我才不要自讨苦吃。    </p><p>适时学会拒绝，不要让被帮助的人对你产生依赖感。</p><h2 id="06"><a href="#06" class="headerlink" title="06"></a>06</h2><h2 id="学会换位思考"><a href="#学会换位思考" class="headerlink" title="学会换位思考"></a>学会换位思考</h2><p>不到万不得已，尽量少开口求人。</p><p>开口前要试着互换位置，问问自己如果遇到这样的求助，是帮还是不帮。如果答案是否定的，那就自己再想其它办法吧。 </p><p>很多事情都同理，设身处地地多从对方的角度来看待问题，你会发现处事方式真的很重要。</p><h2 id="07"><a href="#07" class="headerlink" title="07"></a>07</h2><h2 id="耐心听别人讲话"><a href="#耐心听别人讲话" class="headerlink" title="耐心听别人讲话"></a>耐心听别人讲话</h2><p>首先，耐心听别人讲话是对对方的一种尊重，是待人接物最基本的礼貌。</p><p>其次，三人行必有我师。只要我们有心，总能从别人的言行中收获自己想要的东西。</p><p>因此，耐心听别人讲话，也是吸收智慧的一个重要途径。</p><h2 id="08"><a href="#08" class="headerlink" title="08"></a>08</h2><h2 id="坚持运动"><a href="#坚持运动" class="headerlink" title="坚持运动"></a>坚持运动</h2><p>生命在于运动，要养成坚持运动的好习惯。</p><p>不管去健身房还是在小区楼下跑跑步、在房间里跳跳操，都可以；另外，上下班骑车或步行也是不错的选择。</p><h2 id="09"><a href="#09" class="headerlink" title="09"></a>09</h2><h2 id="学会理财"><a href="#学会理财" class="headerlink" title="学会理财"></a>学会理财</h2><p>见过很多赚得不少但依然月光的人，大家似乎都有一个通病，自己都不知道钱花到哪里去了，每一分钱都花得很随性，完全没有理财的观念。有句话叫：你不理财，财不理你。     </p><p>理财是人生中的一件大事，会理财才能积攒财富。不求大富大贵，但求遇到突发情况可以应急。</p><h2 id="10"><a href="#10" class="headerlink" title="10"></a>10</h2><h2 id="远离抱怨，反省自己"><a href="#远离抱怨，反省自己" class="headerlink" title="远离抱怨，反省自己"></a>远离抱怨，反省自己</h2><p>遇到问题，不要忙着抱怨。抱怨换不来成功，只会伤害感情。</p><p>多从自己身上找原因，问问自己还有什么做得不够的，有则改之，无则加勉。</p><p>如果大家都能有这样的觉悟，那么离下一次成功也就不远了。</p><h2 id="11"><a href="#11" class="headerlink" title="11"></a>11</h2><h2 id="控制情绪，做一个温柔的人"><a href="#控制情绪，做一个温柔的人" class="headerlink" title="控制情绪，做一个温柔的人"></a>控制情绪，做一个温柔的人</h2><p>人都有脾气，都有任性的时候，但要学会自己排解情绪，别把气撒在别人身上。</p><p>坏脾气不但解决不了问题，还会把简单的事情变复杂。</p><p>当你越是变得成熟、温柔，你就越能感知到这个世界的美好和善意。</p><div align="center"><br><img src="/uploads/中国网.jpg" alt="视觉中国"><br></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;01&quot;&gt;&lt;a href=&quot;#01&quot; class=&quot;headerlink&quot; title=&quot;01&quot;&gt;&lt;/a&gt;01&lt;/h2&gt;&lt;h2 id=&quot;不带手机上床&quot;&gt;&lt;a href=&quot;#不带手机上床&quot; class=&quot;headerlink&quot; title=&quot;不带手机上床&quot;&gt;&lt;/a&gt;不
      
    
    </summary>
    
      <category term="中国经济网" scheme="http://Crystalqt.github.io/categories/%E4%B8%AD%E5%9B%BD%E7%BB%8F%E6%B5%8E%E7%BD%91/"/>
    
    
      <category term="哲理" scheme="http://Crystalqt.github.io/tags/%E5%93%B2%E7%90%86/"/>
    
      <category term="励志" scheme="http://Crystalqt.github.io/tags/%E5%8A%B1%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>中国古人23条顶级哲理：大水漫不过鸭子背！｜可读</title>
    <link href="http://Crystalqt.github.io/2018/01/23/CrystalCrazy/"/>
    <id>http://Crystalqt.github.io/2018/01/23/CrystalCrazy/</id>
    <published>2018-01-23T07:38:11.000Z</published>
    <updated>2018-01-23T07:38:11.000Z</updated>
    
    <content type="html"><![CDATA[<p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=16435051&auto=1&height=66"></iframe></p><h2 id="1-能倚在墙根看本闲书的人，一定内心很幸福！"><a href="#1-能倚在墙根看本闲书的人，一定内心很幸福！" class="headerlink" title="1.能倚在墙根看本闲书的人，一定内心很幸福！"></a>1.能倚在墙根看本闲书的人，一定内心很幸福！</h2><h2 id="2-人生如河，该来的总会来，该走的又总会漂走，当下最好！"><a href="#2-人生如河，该来的总会来，该走的又总会漂走，当下最好！" class="headerlink" title="2.人生如河，该来的总会来，该走的又总会漂走，当下最好！"></a>2.人生如河，该来的总会来，该走的又总会漂走，当下最好！</h2><h2 id="3-所谓开心，就是眼睛向上把快乐放大，所谓烦恼，就是眼睛向下把烦恼放大！"><a href="#3-所谓开心，就是眼睛向上把快乐放大，所谓烦恼，就是眼睛向下把烦恼放大！" class="headerlink" title="3.所谓开心，就是眼睛向上把快乐放大，所谓烦恼，就是眼睛向下把烦恼放大！"></a>3.所谓开心，就是眼睛向上把快乐放大，所谓烦恼，就是眼睛向下把烦恼放大！</h2><h2 id="4-花开自美，评说由人！"><a href="#4-花开自美，评说由人！" class="headerlink" title="4.花开自美，评说由人！"></a>4.花开自美，评说由人！</h2><h2 id="5-微笑，对人是礼物，对己是财富。今天，你微笑了吗？"><a href="#5-微笑，对人是礼物，对己是财富。今天，你微笑了吗？" class="headerlink" title="5.微笑，对人是礼物，对己是财富。今天，你微笑了吗？"></a>5.微笑，对人是礼物，对己是财富。今天，你微笑了吗？</h2><h2 id="6-一花一世界！"><a href="#6-一花一世界！" class="headerlink" title="6.一花一世界！"></a>6.一花一世界！</h2><h2 id="7-不懂放弃，怎攀高峰？"><a href="#7-不懂放弃，怎攀高峰？" class="headerlink" title="7.不懂放弃，怎攀高峰？"></a>7.不懂放弃，怎攀高峰？</h2><h2 id="8-登高才能望远！"><a href="#8-登高才能望远！" class="headerlink" title="8.登高才能望远！"></a>8.登高才能望远！</h2><h2 id="9-自信，是人生的支点！"><a href="#9-自信，是人生的支点！" class="headerlink" title="9.自信，是人生的支点！"></a>9.自信，是人生的支点！</h2><h2 id="10-彩虹总在风雨后！"><a href="#10-彩虹总在风雨后！" class="headerlink" title="10.彩虹总在风雨后！"></a>10.彩虹总在风雨后！</h2><h2 id="11-心中的天气是晴是雨，全在自己！"><a href="#11-心中的天气是晴是雨，全在自己！" class="headerlink" title="11.心中的天气是晴是雨，全在自己！"></a>11.心中的天气是晴是雨，全在自己！</h2><h2 id="12-立志前行，从来不晚！"><a href="#12-立志前行，从来不晚！" class="headerlink" title="12.立志前行，从来不晚！"></a>12.立志前行，从来不晚！</h2><h2 id="13-退一步，另有跷径！"><a href="#13-退一步，另有跷径！" class="headerlink" title="13.退一步，另有跷径！"></a>13.退一步，另有跷径！</h2><h2 id="14-好心未必有好结果！"><a href="#14-好心未必有好结果！" class="headerlink" title="14.好心未必有好结果！"></a>14.好心未必有好结果！</h2><h2 id="15-大水漫不过鸭子背！"><a href="#15-大水漫不过鸭子背！" class="headerlink" title="15.大水漫不过鸭子背！"></a>15.大水漫不过鸭子背！</h2><h2 id="16-原本各有千秋，何必争个高低！"><a href="#16-原本各有千秋，何必争个高低！" class="headerlink" title="16.原本各有千秋，何必争个高低！"></a>16.原本各有千秋，何必争个高低！</h2><h2 id="17-人生如旅，要学会停下来看看风景！"><a href="#17-人生如旅，要学会停下来看看风景！" class="headerlink" title="17.人生如旅，要学会停下来看看风景！"></a>17.人生如旅，要学会停下来看看风景！</h2><h2 id="18-同一扇窗户，向上看是风景，向下看是泥土！"><a href="#18-同一扇窗户，向上看是风景，向下看是泥土！" class="headerlink" title="18.同一扇窗户，向上看是风景，向下看是泥土！"></a>18.同一扇窗户，向上看是风景，向下看是泥土！</h2><h2 id="19-摆来摆去的，其实是我们的生命！"><a href="#19-摆来摆去的，其实是我们的生命！" class="headerlink" title="19.摆来摆去的，其实是我们的生命！"></a>19.摆来摆去的，其实是我们的生命！</h2><h2 id="20-神仙尚有不足，何况吾辈凡夫！"><a href="#20-神仙尚有不足，何况吾辈凡夫！" class="headerlink" title="20.神仙尚有不足，何况吾辈凡夫！"></a>20.神仙尚有不足，何况吾辈凡夫！</h2><h2 id="21-能大能小，万事了了，能收能放，扶摇直上！"><a href="#21-能大能小，万事了了，能收能放，扶摇直上！" class="headerlink" title="21.能大能小，万事了了，能收能放，扶摇直上！"></a>21.能大能小，万事了了，能收能放，扶摇直上！</h2><h2 id="22-山不辞石，故能成其高！"><a href="#22-山不辞石，故能成其高！" class="headerlink" title="22.山不辞石，故能成其高！"></a>22.山不辞石，故能成其高！</h2><h2 id="23-比山高的是人，比路长的是腿！"><a href="#23-比山高的是人，比路长的是腿！" class="headerlink" title="23.比山高的是人，比路长的是腿！"></a>23.比山高的是人，比路长的是腿！</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;iframe frameborder=&quot;no&quot; border=&quot;0&quot; marginwidth=&quot;0&quot; marginheight=&quot;0&quot; width=&quot;330&quot; height=&quot;86&quot; src=&quot;//music.163.com/outchain/player?type=2&amp;
      
    
    </summary>
    
      <category term="中国经济网" scheme="http://Crystalqt.github.io/categories/%E4%B8%AD%E5%9B%BD%E7%BB%8F%E6%B5%8E%E7%BD%91/"/>
    
    
      <category term="哲理" scheme="http://Crystalqt.github.io/tags/%E5%93%B2%E7%90%86/"/>
    
      <category term="励志" scheme="http://Crystalqt.github.io/tags/%E5%8A%B1%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://Crystalqt.github.io/2018/01/23/hello-world/"/>
    <id>http://Crystalqt.github.io/2018/01/23/hello-world/</id>
    <published>2018-01-23T04:18:48.000Z</published>
    <updated>2018-01-23T04:18:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="HEXO" scheme="http://Crystalqt.github.io/categories/HEXO/"/>
    
    
      <category term="Hexo" scheme="http://Crystalqt.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>使用hexo搭建自己的博客 - 快速开始</title>
    <link href="http://Crystalqt.github.io/2017/12/18/%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%20-%20%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B/"/>
    <id>http://Crystalqt.github.io/2017/12/18/使用hexo搭建自己的博客 - 快速开始/</id>
    <published>2017-12-18T07:00:09.000Z</published>
    <updated>2018-01-24T07:18:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>工欲善其事，必先利其器。下面要开始用 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> + <a href="https://github.com/" target="_blank" rel="noopener">GitHub</a> 搭建自己的博客了。需要注意的是，网上的资料有一些已经过时，而现在的这篇文章也可能在以后过时，所以只将目前我搭建 hexo 博客站的经验总结如下。</p><a id="more"></a><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>我们要使用 hexo 搭建一个个人博客项目，并使其部署在 <a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a> 上（GitHub Pages是 GitHub 为开发者提供的免费托管网站的空间，这就使得我们不再需要额外购买独立的域名空间了，对于部署个人博客这样的小访问量网站来说极其方便，具体信息可以自行查询资料）。</p><h2 id="简易搭建方法"><a href="#简易搭建方法" class="headerlink" title="简易搭建方法"></a>简易搭建方法</h2><p>从网上找过几处资料，从中选取了最简捷的搭建方法记录如下。更多的资料可以查阅 hexo <a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">官方文档</a>。</p><h3 id="安装前提"><a href="#安装前提" class="headerlink" title="安装前提"></a>安装前提</h3><p>hexo 基于 Node.js，并且我们想要将博客部署在 GitHub 上，于是我们需要先安装 <a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a> 以及 <a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a>。<br>当然，我们还需要申请一个 GitHub 账号，因为我们的网站域名将会是由GitHub按照我们的用户名分配给我们的，比如我的注册用户名是 musheng66，那么我的个人域名就是 <a href="https://musheng66.github.io/" target="_blank" rel="noopener">https://musheng66.github.io/</a>。</p><h3 id="安装-hexo"><a href="#安装-hexo" class="headerlink" title="安装 hexo"></a>安装 hexo</h3><p>hexo 的安装非常简单，如果我们已经安装好了 Node.js，我们就可以打开命令行，只需一行命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><p>当然 Mac 用户朋友们可能由于权限限制，需要输入：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><p>安装完成。</p><h3 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h3><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;要建立的项目文件夹，如：blog&gt;</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></p><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><p>通过命令行可以执行hexo的各项命令，完成从建站到发布所需的操作。</p><h4 id="new"><a href="#new" class="headerlink" title="new"></a>new</h4><p>新建博客，hexo 会自行生成一个对应名称的 .md 文件。需要注意的是如果想删除博客，可以直接删除 .md 文件并重新 generate 博客站。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new 博客名称</span><br></pre></td></tr></table></figure></p><h4 id="generate"><a href="#generate" class="headerlink" title="generate"></a>generate</h4><p>生成静态文件，可以生成我们的 hexo 博客网站。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure></p><h4 id="clean"><a href="#clean" class="headerlink" title="clean"></a>clean</h4><p>清除已生成的静态文件，每次需要重新生成网站之前运行。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure></p><h4 id="server"><a href="#server" class="headerlink" title="server"></a>server</h4><p>用来查看本机的 hexo 博客项目，需要先进行 clean，generate 操作再运行。需要注意的是如果只修改了博客内容，是不需要重新生成网站的，而修改了其他的诸如博客标题、模版样式、资源文件等需要重新 generate 之后才能看到效果。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></p><h4 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h4><p>部署到 GitHub，下文将介绍具体的步骤。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></p><h3 id="与-GitHub-进行关联"><a href="#与-GitHub-进行关联" class="headerlink" title="与 GitHub 进行关联"></a>与 GitHub 进行关联</h3><p>我们需要将目前的 hexo 项目与我们 GitHub 个人账号中的一个 repository 进行关联，这样我们每次只需要一个 deploy 命令，就可以将新写的博客发到我们的个人博客站上了。</p><h4 id="建立-GitHub-repository"><a href="#建立-GitHub-repository" class="headerlink" title="建立 GitHub repository"></a>建立 GitHub repository</h4><p>使用 GitHub 账号登录后，建立一个属于自己的 repository 非常容易，<strong>我们需要注意的是 repository 的命名必须和我们被分配的域名相同</strong>，比如我的 repository 就需要命名为 musheng66.github.io，这一点非常重要。</p><h4 id="配置与发布"><a href="#配置与发布" class="headerlink" title="配置与发布"></a>配置与发布</h4><p>在我们的整个 hexo 项目中，<strong>_config.yml</strong> 是配置文件，我们可以在其中修改各种可配置的网站属性。现在我们需要将本地的 hexo 项目与 GitHub 上的 repository 进行关联。<br>我们需要找到 _config.yml 中的 deploy 属性，将其设置如下：</p><pre>deploy:  type: git  repository: https://github.com/musheng66/musheng66.github.io.git  branch: master</pre><p><strong>注意</strong>：repository 属性需要填写<strong>我们自己的 repository 对应的地址</strong>。修改完成后，我们每次使用 deploy 命令即可发布新的博客。至此，使用 hexo + GitHub 搭建博客的简要过程就介绍完了。</p><h2 id="踩过的坑"><a href="#踩过的坑" class="headerlink" title="踩过的坑"></a>踩过的坑</h2><h3 id="页面引入-jQuery-的问题"><a href="#页面引入-jQuery-的问题" class="headerlink" title="页面引入 jQuery 的问题"></a>页面引入 jQuery 的问题</h3><p>使用主题生成的主页面 index.html 会引入 jQuery 文件，而引入的语句通常是这样的：</p><pre><code>&lt;script src=&quot;//ajax.googleapis.com/ajax/libs/jquery/2.0.3/jquery.min.js&quot;&gt;&lt;/script&gt;</code></pre><p>目前我们的 GFW 显然不会放任我们访问这样的站点，所以这会导致我们的博客无法正常渲染 jQuery 相关的动效和功能。</p><p>想要解决这个问题也并不复杂，只需要找到当前实用的主题文件夹，在其layout文件夹中找到写有引入 jQuery 文件的位置。对于使用 hexo 默认方法搭建博客的开发者来说，此位置一般在 themes/landscape/layout/_partial/after-footer.ejs。我们只需在此处将引入 jQuery 的地址替换为国内可访问的镜像，或者索性下载一份 jQuery 代码放入此主题的 source/js 文件夹中再行引用即可。</p><p>补充一点，我们需要注意此处引用的 jQuery 是 http 协议的外部资源，而我们的项目部署在 GitHub 上，GitHub 使用的 https 协议是无法加载 http 协议的资源的。好在我们引用的时候并没有指定协议，在 URL 之前的<code>//</code>使用了当前协议，因此外部资源可以正常引入。</p><h3 id="使用-Material-主题时出现的问题"><a href="#使用-Material-主题时出现的问题" class="headerlink" title="使用 Material 主题时出现的问题"></a>使用 Material 主题时出现的问题</h3><p>众所周知，<a href="https://github.com/viosey/hexo-theme-material" target="_blank" rel="noopener">Material</a> 主题是一款非常漂亮的 hexo 主题，不过我们在第一次使用它时可能也会出现一些小问题。</p><h4 id="hexo-g-报错问题"><a href="#hexo-g-报错问题" class="headerlink" title="hexo g 报错问题"></a>hexo g 报错问题</h4><p>虽然 hexo g 报错可能有各种原因，但大家在第一次使用 Material 主题时最容易导致报错的原因大概会是这样：</p><blockquote><p>注意！ 在主题的开发迭代过程中，主题的配置文件模板 可能会改动。为了避免使用 git pull 更新主题的用户出现冲突，我们将 主题配置文件模板 命名为 _config.template.yml。配置主题时，你应该拷贝一份 _config.template.yml 并将其重命名为 _config.yml。</p></blockquote><p>这是 Material 主题使用说明中的一段，正因为它将 _config 配置文件改了名字，我们在 hexo g 时才会报类似这样的错：</p><pre>Unhandled rejection TypeError: /Users/musheng/Projects/WebstormProjects/blog/themes/material/layout/post.ejs:44    42|                 <!-- Post Comments -->    43|                 <% if(page.comment="" !="=" false)="" {="" %=""> >> 44|                     <%- partial('_partial="" comment')="" %="">    45|                 <% }="" %="">    46|                 47|</%></%-></%></pre><p>所以对于这个问题，我们只需要<strong>拷贝一份 _config.template.yml 并将其重命名为 _config.yml</strong>就可以解决了。</p><h4 id="本地搜索问题"><a href="#本地搜索问题" class="headerlink" title="本地搜索问题"></a>本地搜索问题</h4><p>使用 Material 主题时，如果我们想使用本地搜索而非 Google 或其他搜索该如何设置呢？</p><p>首先，使用本地搜索需要安装 <a href="https://github.com/PaicHyperionDev/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a> 插件。</p><p>然后，我们需要在项目根目录下找到 _config.yml 文件，在里面添加：</p><pre># Native Search## https://github.com/PaicHyperionDev/hexo-generator-searchsearch:    path: search.xml    field: all</pre><p>另外，因为 Material 主题的配置文件中对搜索可能也有配置，我们还需要找到主题中的配置，<strong>修改 use 为 local</strong> ：</p><pre># Search Systems# Available value:#     swiftype | google | localsearch:    use: local    swiftype_key:</pre><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo 官方</a></p><p><a href="https://material.viosey.com/" target="_blank" rel="noopener">Material 主题</a></p><p><a href="https://www.qcloud.com/community/article/989575001490326243" target="_blank" rel="noopener">使用 Github 和 Hexo 快速搭建个人博客</a></p><p><a href="http://baixin.io/2015/08/HEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">HEXO搭建个人博客</a></p><p><a href="https://musheng66.github.io/" target="_blank" rel="noopener">使用hexo搭建自己的个人博客</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工欲善其事，必先利其器。下面要开始用 &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt; + &lt;a href=&quot;https://github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt; 搭建自己的博客了。需要注意的是，网上的资料有一些已经过时，而现在的这篇文章也可能在以后过时，所以只将目前我搭建 hexo 博客站的经验总结如下。&lt;/p&gt;
    
    </summary>
    
      <category term="HEXO" scheme="http://Crystalqt.github.io/categories/HEXO/"/>
    
    
      <category term="Hexo" scheme="http://Crystalqt.github.io/tags/Hexo/"/>
    
  </entry>
  
</feed>
